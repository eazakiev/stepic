alphabet = 'abcdef'  # Одно и то же
for letter in (alphabet):
    print(letter)

alphabet = 'abcdef'
for letter in range(len(alphabet)):
    print(alphabet[letter])


alphabet = 'abcdef'
for letter in range(len(alphabet)):
    print(letter)

s = '01234567891011121314151617'
for i in range(0, len(s), 5):
    print(s[i], end='')


# TODO В столбик 1
# На вход программе подается одна строка. Напишите программу, которая выводит элементы строки с индексами 0, 2, 4,
# ... в столбик.

# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести элементы строки с индексами 0, 2, 4, ..., каждое на отдельной строке.

alphabet = input()
for letter in range(0, len(alphabet)):
    if letter % 2 == 0:
        print(alphabet[letter])

alphabet = input()
for index, letter in enumerate(alphabet):
    if index % 2 == 0:
        print(letter)


# TODO В столбик 2
# На вход программе подается одна строка. Напишите программу, которая выводит в столбик элементы строки в обратном порядке.

# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести в столбик элементы строки в обратном порядке.


# alphabet = input()  # abc
# for index in range(0, len(alphabet)):
#     print(alphabet[index])

# 0 1 2 3 4  (5 элементов с начала)
# -1 -2 -3 -4 -len(text)  (5 элементов с конца)

text = input()  # abc
for index in range(1, len(text) + 1):  # 1-3
    print(text[-index])


text = input()  # abc 012
# -1(=2), -3(0), -1 (range всегда уберает одно число -1)
for index in range(-1, -len(text)-1, -1):
    print(index)


# TODO ФИО
# На вход программе подаются три строки: имя, фамилия и отчество. Напишите программу, которая выводит инициалы человека.

# Формат входных данных
# На вход программе подаются три строки, каждая на отдельной строке.
# Формат выходных данных
# Программа должна вывести ФИО человека.
# Примечание. Гарантируется, что имя, фамилия и отчество начинаются с заглавной буквы.

first_name, last_name, patronymic = input(), input(), input()
print(last_name[0], first_name[0], patronymic[0], sep='')

first_name, last_name, patronymic = [input() for _ in range(3)]
print(last_name[0], first_name[0], patronymic[0], sep='')

# TODO Цифра 1
# На вход программе подается одна строка состоящая из цифр. Напишите программу, которая считает сумму цифр данной строки.

# Формат входных данных
# На вход программе подается одна строка состоящая из цифр.
# Формат выходных данных
# Программа должна вывести сумму цифр данной строки.

text = input()
total = 0  # 2514
for index in range(len(text)):
    total += int(text[index])
print(total)

text = input()
total = 0
for _, digit in enumerate(text):
    total += int(digit)

print(total)

total = 0  # 2514
text = input()
for digit in text:
    total += int(digit)

print(total)


text = input()
numbers = sum(map(int, text))
print(numbers)


# TODO Цифра 2
# На вход программе подается одна строка. Напишите программу, которая выводит сообщение «Цифра» (без кавычек), если строка содержит цифру. В противном случае вывести сообщение «Цифр нет» (без кавычек).

# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
flag = False
for symbol in text:
    if symbol in '0123456789':
        flag = True
if flag:
    print("Цифра")
else:
    print("Цифр нет")


text = input()
flag = "Цифр нет"
for symbol in text:
    if symbol in "0123456789":
        flag = "Цифра"

print(flag)


text = input()
for symbol in text:
    if symbol in '0123456789':
        print("Цифра")
        break
else:
    print("Цифр нет")


# TODO Сколько раз?
# На вход программе подается одна строка. Напишите программу, которая определяет сколько раз в строке встречаются символы + и *.

# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести сколько раз встречаются символы  + и * в строке.


text = input()
symbol_plus = 0
symbol_asterisk = 0
for _, symbol in enumerate(text):
    if symbol == "+":
        symbol_plus += 1
    if symbol == "*":
        symbol_asterisk += 1

print(f"Символ + встречается {symbol_plus} раз")
print(f"Символ * встречается {symbol_asterisk} раз")


text = input()
symbol_plus = 0
symbol_asterisk = 0
for symbol in text:
    if symbol == "+":
        symbol_plus += 1
    if symbol == "*":
        symbol_asterisk += 1

print(f"Символ + встречается {symbol_plus} раз")
print(f"Символ * встречается {symbol_asterisk} раз")


text = input()
symbol_plus = 0
symbol_asterisk = 0
for index in range(len(text)):
    if text[index] == "+":
        symbol_plus += 1
    if text[index] == "*":
        symbol_asterisk += 1

print(f"Символ + встречается {symbol_plus} раз")
print(f"Символ * встречается {symbol_asterisk} раз")


text = input()
print(f"Символ + встречается {text.count('+')} раз")
print(f"Символ * встречается {text.count('*')} раз")


# TODO Одинаковые соседи
# На вход программе подается одна строка. Напишите программу, которая определяет сколько в ней одинаковых соседних символов.

# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести количество одинаковых соседних символов.

text = input()  # aabbcc
count = 0
for index in range(len(text) - 1):
    if text[index] == text[index + 1]:  # Значение индекса 0 сравнить с значением индекса 1
        count += 1
print(count)


# TODO Гласные и согласные
# На вход программе подается одна строка с буквами русского языка. Напишите программу, которая определяет количество гласных и согласных букв.

# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести количество гласных и согласных букв.
# Примечание. В русском языке 10 гласных букв (а, у, о, ы, и, э, я, ю, ё, е) и 21 согласная буква (б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ).

text = input().lower()  # Вдохновение – это умение приводить себя в рабочее состояние!
vowel_letters = "ауоыиэяюёе"
consonant_letters = "бвгджзйклмнпрстфхцчшщ"
count_vowel_letters = 0
count_consonant_letters = 0
for letter in text:
    if letter in vowel_letters:
        count_vowel_letters += 1
    if letter in consonant_letters:
        count_consonant_letters += 1

print(
    f"Количество гласных букв равно {count_vowel_letters}\nКоличество согласных букв равно {count_consonant_letters}")

text = input().lower()  # Вдохновение – это умение приводить себя в рабочее состояние!
vowel_letters = "ауоыиэяюёе"
consonant_letters = "бвгджзйклмнпрстфхцчшщ"
count_vowel_letters = 0
count_consonant_letters = 0
for index in range(len(text)):
    if text[index] in vowel_letters:
        count_vowel_letters += 1
    if text[index] in consonant_letters:
        count_consonant_letters += 1

print(
    f"Количество гласных букв равно {count_vowel_letters}\nКоличество согласных букв равно {count_consonant_letters}")


# TODO Decimal to Binary
# На вход программе подается натуральное число, записанное в десятичной системе счисления. Напишите программу, которая переводит данное число в двоичную систему счисления.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести число записанное в двоичной системе счисления.

number = int(input())  # 5(101) 255 (11111111)
binary = ''
while number > 0:
    binary = str(number % 2) + binary
    number //= 2

print(binary)


number = int(input())  # 5(5,4,3,2,1)
binary = ''
while number > 0:
    binary += str(number % 2)
    number //= 2

print(binary[::-1])


print(bin(5))


# TODO Дополните приведенный код, используя срезы, так чтобы он вывел первые 12 символов строки s.
s = "In 2010, someone paid 10k Bitcoin for two pizzas."  # -1 т.к range
print(s[:12])


# TODO Дополните приведенный код, используя срезы, так чтобы он вывел последние 9 символов строки s.
s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[-9:])


# TODO Дополните приведенный код, используя срезы, так чтобы он вывел каждый 7 символ строки s начиная от начала строки.
s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[::7])

# TODO Дополните приведенный код, используя срезы, так чтобы он вывел строку s в обратном порядке.
s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[::-1])


# TODO Палиндром На вход программе подается одно слово, записанное в нижнем регистре. Напишите программу,
#  которая определяет является ли оно палиндромом.

# Формат входных данных
# На вход программе подается одно слово в нижнем регистре.
# Формат выходных данных
# Программа должна вывести «YES», если слово является палиндромом и «NO» в противном случае.

# Примечание. Палиндром читается одинаково в обоих направлениях, например слово «потоп».

word = input().lower()
if word == word[::-1]:
    print("YES")
else:
    print("NO")


# TODO Делаем срезы 1
# На вход программе подается одна строка. Напишите программу, которая выводит:

# общее количество символов в строке;
# исходную строку повторенную 3 раза;
# первый символ строки;
# первые три символа строки;
# последние три символа строки;
# строку в обратном порядке;
# строку с удаленным первым и последним символом.
# Формат входных данных
# На вход программе подается одна строка, длина которой больше 3 символов.

# Формат выходных данных
# Программа должна вывести данные в соответствии с условием. Каждое значение выводится на отдельной строке.

word = input()  # abcdefghijklmnopqrstuvwxyz
print(len(word), word * 3, word[:1], word[:3],
      word[-3:], word[::-1], word[1:-1], sep='\n')

# TODO Делаем срезы 2
# На вход программе подается одна строка. Напишите программу, которая выводит:

# третий символ этой строки;
# предпоследний символ этой строки;
# первые пять символов этой строки;
# всю строку, кроме последних двух символов;
# все символы с четными индексами;
# все символы с нечетными индексами;
# все символы в обратном порядке;
# все символы строки через один в обратном порядке, начиная с последнего.
# Формат входных данных
# На вход программе подается одна строка, длина которой больше 5 символов.

# Формат выходных данных
# Программа должна вывести данные в соответствии с условием. Каждое значение выводится на отдельной строке.

text = input()  # abcdefghijklmnopqrstuvwxyz
print(text[2:3], text[-2:-1], text[:5], text[:-2], text[::2],
      text[1::2], text[::-1], text[::-2], sep="\n")


# TODO Две половинки На вход программе подается строка текста. Напишите программу, которая разрежет ее на две равные
#  части, переставит их местами и выведет на экран.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Если длина строки нечетная, то длина первой части должна быть на один символ больше.

text = input()  # abcdef abcdefg
part_one = text[:len(text) // 2]
part_two = text[len(text) // 2:]
print(part_one, part_two, sep='\n')


text = input()  # abcdef abcdefg
text_one, text_two = text[:len(text) // 2], text[len(text) // 2:]
text_one_not_even, text_two_not_even = text[:len(
    text) // 2 + 1], text[len(text) // 2 + 1:]
if len(text) % 2 == 0:
    print(text_two, text_one, sep='')
else:
    print(text_two_not_even, text_one_not_even, sep='')


# TODO Заглавные буквы
# На вход программе подается строка состоящая из имени и фамилии человека, разделенных одним пробелом. Напишите программу, которая проверяет, что имя и фамилия начинаются с заглавной буквы.

# Формат входных данных
# На вход программе подается строка.
# Формат выходных данных
# Программа должна вывести «YES» если имя и фамилия начинаются с заглавной буквы и «NO» в противном случае.

text = input()
if text.istitle():
    print("YES")
else:
    print("NO")


# TODO sWAP cASE
# На вход программе подается строка. Напишите программу, которая меняет регистр символов, другими словами замените все строчные символы заглавными и наоборот.

# Формат входных данных
# На вход программе подается строка.

# Формат выходных данных
# Программа должна вывести строку в соответствии с условием задачи.

text = input().swapcase()
print(text)


# TODO Хороший оттенок
# На вход программе подается строка текста. Напишите программу, которая определяет является ли оттенок текста хорошим или нет. Текст имеет хороший оттенок, если содержит подстроку «хорош» во всевозможных регистрах.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести «YES» если текст имеет хороший оттенок и «NO» в противном случае.
# Примечание. Текст содержащий хорош, ХОРОШ, Хорош, хОРОШ и т.д. имеет хороший оттенок.

text = input().lower()
if "хорош" in text:
    print("YES")
else:
    print("NO")


# TODO Нижний регистр
# На вход программе подается строка. Напишите программу, которая подсчитывает количество буквенных символов в нижнем регистре.

# Формат входных данных
# На вход программе подается строка.

# Формат выходных данных
# Программа должна вывести количество буквенных символов в нижнем регистре.

text = input()
alphabet = "abcdefghijklmnopqrstuvwxyz"
count = 0
for letter in text:
    if letter in alphabet:
        count += 1

print(count)


text = input()
count = 0
for letter in text:
    if letter != letter.upper():
        count += 1

print(count)


# TODO Количество слов
# На вход программе подается строка текста, состоящая из слов, разделенных ровно одним пробелом. Напишите программу, которая подсчитывает количество слов в ней.

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести количество слов.
# Примечание 1. Строка текста не содержит пробелов в начале и конце.
# Примечание 2. Используйте для решения задачи метод count.


text = input().strip()
count = text.count(" ") + 1
print(count)

# TODO Минутка генетики
# На вход программе подается строка генетического кода, состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин). Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.

# Формат входных данных
# На вход программе подается строка генетического кода, состоящая из символов А, Г, Ц, Т, а, г, ц, т.
# Формат выходных данных
# Программа должна вывести сколько гуанина, тимина, цитозина, аденина входит в данную строку генетического кода.
# Примечание. Строка не содержит символов, кроме как А, Г, Ц, Т, а, г, ц, т.

text = input().lower()
print(f"Аденин: {text.count('а')}\nГуанин: {text.count('г')}\nЦитозин: {text.count('ц')}\nТимин: {text.count('т')}")


# TODO Очень странные дела
# Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди. На приемник ему поступает
# n различных последовательностей кода Морзе. Декодировав их, он получает последовательности из цифр и строчного латинского алфавита, при этом во всех сообщениях Оди содержится число 11, причем минимум 3 раза. Помогите определить Джиму количество сообщений от Оди.

# Формат входных данных
# В первой строке подаётся число
# n – количество сообщений, в последующих
# n строках вводятся строки, содержащие латинские строчные буквы и цифры.

# Формат выходных данных
# Программа должна вывести количество строк в которых содержится число 11 минимум 3 раза.
# Примечание: Числа 11 необязательно должны быть разделены другими символами, нужно подсчитать вхождение последовательности символов "11", т.е. например в строке "111" содержится одна такая последовательность, в то время как в "1111" их уже две.

number = int(input())
count_word = 0
for _ in range(number):
    text = input()
    if text.count("11") >= 3:
        count_word += 1

print(count_word)


# TODO Количество цифр
# На вход программе подается строка текста. Напишите программу, которая подсчитывает количество цифр в данной строке.

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести количество цифр в данной строке.

text = input()
count_digits = 0
for symbol in text:
    if symbol.isdigit():
        count_digits += 1

print(count_digits)


text = input()
result = len([symbol for symbol in text if symbol.isdigit()])
print(result)


# TODO .com or .ru
# На вход программе подается строка текста. Напишите программу, которая проверяет, что строка заканчивается подстрокой .com или .ru.

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести «YES» если введенная строка заканчивается подстрокой .com или .ru и «NO» в противном случае.

text = input()
if text.endswith((".com", ".ru")):
    print("YES")
else:
    print("NO")


text = input()
result = ("YES" if text.endswith((".com", ".ru")) else "NO")
print(result)


# TODO Самый частотный символ
# На вход программе подается строка текста. Напишите программу, которая выводит на экран символ, который появляется наиболее часто.

# Формат входных данных
# На вход программе подается строка текста. Текст может содержать строчные и заглавные буквы английского и русского алфавита, а также цифры.
# Формат выходных данных
# Программа должна вывести символ, который появляется наиболее часто.
# Примечание 1. Если таких символов несколько, следует вывести последний по порядку символ.
# Примечание 2. Следует различать заглавные и строчные буквы, а также буквы русского и английского алфавита.

text = input()  # abaabbcccc
max_count = 0
max_symbol = ""
for symbol in text:
    if text.count(symbol) >= max_count:
        max_count = text.count(symbol)
        max_symbol = symbol

# print(max_count)
print(max_symbol)


text = input()[::-1]  # abaabbcccc
result = max(text, key=text.count)
print(result)


# TODO Первое и последнее вхождение
# На вход программе подается строка текста. Если в этой строке буква «f» встречается только один раз, выведите её индекс. Если она встречается два и более раз, выведите индекс её первого и последнего вхождения на одной строке, разделенных символом пробела. Если буква «f» в данной строке не встречается, следует вывести «NO».

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
if text.count("f") == 1:
    print(text.index("f"))
elif text.count("f") >= 2:
    print(text.index("f"), text.rindex("f"))
else:
    print("NO")


# TODO Удаление фрагмента
# На вход программе подается строка текста, в которой буква «h» встречается минимум два раза. Напишите программу, которая удаляет из этой строки первое и последнее вхождение буквы «h», а также все символы, находящиеся между ними.

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()  # ahaha
result = text[:text.find("h")] + text[text.rfind("h") + 1:]
print(result)


# TODO Дополните приведенный код, используя форматирование строк с помощью метода format, так чтобы он вывел текст:
# «In 2010, someone paid 10k Bitcoin for two pizzas.» (без кавычек).

s = 'In {0}, someone paid {1} {2} for two pizzas.'.format(
    "2010", "10k", "Bitcoin")
print(s)


# Дополните приведенный код, используя форматирование строк с помощью f-строк, так чтобы он вывел текст:
# «In 2010, someone paid 10K Bitcoin for two pizzas.» (без кавычек).

year = 2010
amount = '10K'
currency = 'Bitcoin'

print(f'In {year}, someone paid {amount} {currency} for two pizzas.')


# TODO Символы в диапазоне
# На вход программе подаются два числа a и b.
# Напишите программу, которая для каждого кодового значения в диапазоне от a до b (включительно), выводит соответствующий ему символ из таблицы символов Unicode.

# Формат входных данных
# На вход программе подается два натуральных числа, каждое на отдельное строке.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

number_1 = int(input())
number_2 = int(input())
for symbol in range(number_1, number_2 + 1):
    print(chr(symbol), end=" ")


# TODO Простой шифр
# На вход программе подается строка текста. Напишите программу, которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести кодовые значения символов строки разделенных одним символом пробела.

text = input()
for symbol in text:
    print(ord(symbol), end=" ")


# TODO Шифр Цезаря 🌶️
# Легион Цезаря, созданный в 23 веке на основе Римской Империи не изменяет древним традициям и использует шифр Цезаря. Это их и подвело, ведь данный шифр очень простой. Однако в постапокалипсисе люди плохо знают все тонкости довоенного мира, поэтому ученые из НКР не могут понять как именно нужно декодировать данные сообщения. Напишите программу для декодирования этого шифра.

# Формат входных данных
# В первой строке дается число (n (1≤ n≤ 25) – сдвиг, во второй строке даётся закодированное сообщение в виде строки со строчными латинскими буквами.
# Формат выходных данных
# Программа должна вывести одну строку – декодированное сообщение. Обратите внимание, что нужно декодировать сообщение, а не закодировать.

# bwfusvfupdbftbs (avetruetocaesar) 14 fsfftsfufksttskskt - rerrfergrweffewewf
number = int(input())
text = input()
for symbol in text:
    if ord(symbol) - number < 97:
        print(chr(ord(symbol) + 26 - number), end="")
    else:
        print(chr(ord(symbol) - number), end="")

# --------------------------------*start exam*---------------------------------------------------
# Каждый третий
# На вход программе подается строка текста. Напишите программу, которая удаляет из нее все символы с индексами кратными 3, то есть символы с индексами 0, 3, 6, ....

# Формат входных данных. На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести строку текста в соответствии с условием задачи.

text = input()
for index, symbol in enumerate(text):
    if index % 3 != 0:
        print(symbol, end="")

text = input()
for index in range(len(text)):
    if index % 3 != 0:
        print(text[index], end="")


# TODO Замени меня полностью
# На вход программе подается строка текста. Напишите программу, которая заменяет все вхождения цифры 1 на слово «one».

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
new_txt = text.replace("1", "one")
print(new_txt)


# TODO Удали меня полностью
# На вход программе подается строка текста. Напишите программу, которая удаляет все вхождения символа «@».

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()
new_txt = text.replace("@", "")
print(new_txt)


# TODO Второе вхождение
# На вход программе подается строка текста. Напишите программу, которая выводит индекс второго вхождения буквы «f». Если буква «f» встречается только один раз, выведите число -1, а если не встречается ни разу, выведите число -2.

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.


text = input()  # affective
if "f" not in text:
    print("-2")
elif text.count("f") == 1:
    print("-1")
else:
    print(text.find("f", text.find("f") + 1))


text = input()
if "f" not in text:
    print("-2")
elif text.count("f") == 1:
    print("-1")
elif text.count("f") >= 2:
    text = text.replace("f", "a", 1)
    print(text.find("f"))

# Переворот
# На вход программе подается строка текста в которой буква «h» встречается как минимум два раза. Напишите программу, которая возвращает исходную строку и переворачивает последовательность символов, заключенную между первым и последним вхождением буквы «h».

# Формат входных данных
# На вход программе подается строка текста.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

text = input()  # abch12345h - abch54321h
first_txt = text[text.find("h") + 1:text.rfind("h")]
second_txt = first_txt[::-1]
new_txt = text.replace(first_txt, second_txt)
print(new_txt)
# -------------------------------*end exam*-----------------------------------------------------
