print(13 / 7)  # 1.5
print(13 // 7)  # 1
print(13 % 7)  # 6

# TODO Площадь треугольника (S = 1/2 * a*b)
# Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь.
#
# Формат входных данных
# На вход программе подаётся два числа с плавающей точкой – длины катетов, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число – площадь треугольника.

number_1, number_2 = float(input()), float(input())
area_triangle = (1 / 2) * (number_1 * number_2)  # 0.5
print(area_triangle)

# TODO Две старушки (1) V = V1+V2, 2) t = S/V)
# Две старушки идут навстречу друг другу с постоянными скоростями V_1V
# 1
# ​
#   и V_2V
# 2
# ​
#   км/ч. Определите, через какое время старушки встретятся, если расстояние между ними равно SS км.
#
# Формат входных данных
# На вход программе подаются три числа с плавающей точкой S, \, V_1, \, V_2S,V
# 1,V2, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число в соответствии с условием задачи.
# Примечание. Это очень быстрые старушки.

distance, speed_1, speed_2 = float(input()), float(input()), float(input())
total_speed = sum([speed_1, speed_2])
result = distance / total_speed
print(result)

# TODO Обратное число (num ** -1 == 1/num)
# Напишите программу, которая считывает с клавиатуры одно число и выводит обратное ему. Если при этом введённое
# с клавиатуры число – ноль, то вывести «Обратного числа не существует» (без кавычек).
#
# Формат входных данных
# На вход программе подается одно действительное число.
# Формат выходных данных
# Программа должна вывести действительное число обратное данному, либо текст в соответствии с условием задачи.

number = float(input())
if number == 0:
    print("Обратного числа не существует")
elif (number ** -1) == (1 / number):
    print(number ** -1)

number = float(input())
if number == 0:
    print("Обратного числа не существует")
else:
    print(number ** -1)

# TODO 451 градус по Фаренгейту (C = 5/9 * (F-32))
# У известного американского писателя Рэя Бредбери есть роман «451 градус по Фаренгейту». Напишите программу, которая
# определяет, какой температуре по шкале Цельсия соответствует указанное значение по шкале Фаренгейта.
# Используйте формулу для перевода: C = \dfrac{5}{9}\left(F - 32\right)C=
# 9 5 (F− 32).
#
# Формат входных данных
# На вход программе подаётся вещественное число градусов по шкале Фаренгейта.
# Формат выходных данных
# Программа должна вывести число градусов по шкале Цельсия.

degrees_fahrenheit = float(input())
degrees_celsius = (5 / 9) * (degrees_fahrenheit - 32)
print(degrees_celsius)

# TODO Dog age
# На вход программе подается число nn – количество собачьих лет. Напишите программу, которая вычисляет возраст
# собаки в человеческих годах.
#
# Формат входных данных
# На вход программе подаётся натуральное число – количество собачьих лет.
# Формат выходных данных
# Программа должна вывести возраст собаки в человеческих годах.
# Примечание. В течение первых двух лет собачий год равен 10.5 человеческим годам. После этого каждый год
# собаки равен 4 человеческим годам.

dog_age = int(input())
if 1 <= dog_age <= 2:
    print(dog_age * 10.5)
elif dog_age > 2:
    result = (dog_age - 2) * 4 + 21
    print(result)
else:
    print("Ошибка ввода")

dog_age = int(input())
result = min(2, dog_age) * 10.5 + max(dog_age - 2, 0) * 4
print(result)

# TODO Первая цифра после точки
# Дано положительное действительное число. Выведите его первую цифру после десятичной точки.
#
# Формат входных данных
# На вход программе подается положительное действительное число.
# Формат выходных данных
# Программа должна вывести цифру в соответствии с условием задачи.

number = float(input())
result = (number * 10) % 10
print(int(result))

# TODO Дробная часть
# Дано положительное действительное число. Выведите его дробную часть.
#
# Формат входных данных
# На вход программе подается положительное действительное число.
# Формат выходных данных
# Программа должна вывести дробную часть числа в соответствии с условием задачи.

number = float(input())
result = number - int(number)
print(result)

print(int(44.45))  # 44
print(int(39483.2))  # 39483
print(44.45 - int(44.45))  # 0.45000000000000284
print(39483.2 - int(39483.2))  # 0.19999999999708962

number = int(input())  # 123
hundreds = number // 100  # (1 - сотни)
units = number // 10 % 10  # (2 - десятки)
dozens = number % 10  # (3 - единицы)
number_sum = sum([hundreds, units, dozens])
new_number = dozens * 100 + units * 10 + hundreds
print(f"{number_sum} {new_number}")

number = int(input())  # 123
number_sum = sum([(number // 100), (number // 10 % 10), (number % 10)])  # 1, 2, 3 (6)
new_number = str(number // 100), str(number % 10), str(number // 10 % 10)  # 1, 3, 2
print(f"{number_sum} {''.join(new_number)}")

# TODO ПЕРЕСТАНОВКА ЦИФР
# Задача Отправить
# Входные данные
# С клавиатуры вводится натуральное трехзначное число.
#
# Выходные данные
# Выведите через пробел в одну строку сумму цифр числа и новое число, образованное перестановкой единиц и десятков.
# Примеры
# №	Входные данные	Выходные данные
# 123	   6 132

number = int(input())  # 123
numbers = [number // 100, number % 100 // 10, number % 10]
print(sum(numbers), numbers[0] * 100 + numbers[2] * 10 + numbers[1])  # 6 132

# number = int(input())  # 123
# numbers = [number // 100, number % 100 // 10, number % 10]
# number_sum = sum(numbers)
# print(f"{number_sum} {numbers[0]}{numbers[2]}{numbers[1]}")


# TODO СУММА КВАДРАТОВ ЦИФР
# Напишите программу, которая по исходному пятизначному числу находит сумму квадратов цифр данного числа.
#
# Входные данные
# На вход программы подается натуральное пятизначное число.
# Выходные данные
# Выведите ответ на задачу.
# Примеры
# №	Входные данные	Выходные данные
# 12345	55

number = int(input())  # 12345
num_1 = number // 10000  # 1
num_2 = number // 1000 % 10  # 2
num_3 = number // 100 % 10  # 3
num_4 = number % 100 // 10  # (number // 10 % 10)  # 4
num_5 = number % 10  # 5
numbers = [num_1, num_2, num_3, num_4, num_5]
result = list(map(lambda elem: elem ** 2, numbers))
print(sum(result))

# TODO НОВОЕ ЧИСЛО
# Дано четырехзначное число. Написать программу, которая выводит на экран число, образованное при перестановке
# первой и второй, третьей и четвертой цифр заданного числа.
#
# Входные данные
# На вход программе подаётся одно число.
# Выходные данные
# Необходимо вывести новое число.
#
# Примеры
# №	Входные данные	Выходные данные
# 4561	5416

number = int(input())  # 4561
num_1 = number // 1000
num_2 = number // 100 % 10
num_3 = number % 100 // 10
num_4 = number % 10
print(num_2 * 1000 + num_1 * 100 + num_4 * 10 + num_3)

# TODO Задача 42696. Определи век
# Что такое век? Век - это период в 100 лет(столетие).Например, 1 - й век состоит из годов с 1 по 100, 2 - й век состоит
# из годов с 101 по 200 и так далее.
# Напишите программу, которая определяет в каком веке находится год N?
#
# Входные данные
# На вход подается натуральное число N(1 <= N <= 3000).
# Выходные данные
# Выведите на экран ответ на задачу в виде целого числа.
# Примеры
# №   Входные данные
# Выходные данные
# 2021  21
# 200   2
# Запрещенные операторы: if; while; for


number = int(input())  # 2021
if number % 100 > 0:
    result = number // 100 + 1
else:
    result = number // 100

print(int(result))

# TODO ЭЛЕКТРОННЫЕ ЧАСЫ
# Задача Отправить
# Дано число n. С начала суток прошло n минут. Определите, сколько часов и минут будут показывать электронные
# часы в этот момент. Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут
# (от 0 до 59). Учтите, что число n может быть больше, чем количество минут в сутках.
#
# Входные данные
# Вводится целое число n.
# Выходные данные
# Выведите ответ на задачу.
#  Запрещено использовать какие-либо алгоритмические конструкции, кроме арифметических операций
#  Примеры
# №	Входные данные	Выходные данные
# 150	2 30
# 1441	0 1
# Запрещенные операторы: if;for;while;do;max

number = int(input())  # 150 (2 30) 1441 (0 1)
hour = number // 60
minutes = number % 60
print(int(hour), int(minutes))

# TODO Наибольшее и наименьшее
# Напишите программу, которая находит наименьшее и наибольшее из пяти чисел.
#
# Формат входных данных
# На вход программе подается пять целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести наименьшее и наибольшее число с поясняющей надписью.

numbers = [int(input()) for _ in range(5)]
min_number = min(numbers)
max_number = max(numbers)
print(f"Наименьшее число = {min_number}")
print(f"Наибольшее число = {max_number}")

numbers = []
for _ in range(5):
    number = int(input())
    numbers.append(number)
min_number = min(numbers)
max_number = max(numbers)
print(f"Наименьшее число = {min_number} \nНаибольшее число = {max_number}")

# TODO Сортировка трёх 🌶️
# Напишите программу, которая упорядочивает три числа от большего к меньшему.
#
# Формат входных данных
# На вход программе подается три целых числа, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести три числа, каждое на отдельной строке, упорядоченных от большего к меньшему.

numbers = sorted([int(input()) for _ in range(3)], reverse=True)
for number in numbers:
    print(number)

# TODO Интересное число
# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине цифре.
# Напишите программу, которая определяет интересное число или нет. Если число интересное, следует
# вывести – «Число интересное» иначе «Число неинтересное».
#
# Формат входных данных
# На вход программе подается целое трехзначное число.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

number = int(input())  # 945 123 896
max_number = max(number // 100, (number % 100 // 10), number % 10)
min_number = min(number // 100, (number % 100 // 10), number % 10)
numbers = [number // 100, number % 100 // 10, number % 10]
result = ("Число интересное" if max_number - min_number in numbers else "Число неинтересное")
print(result)

number = int(input())  # 945 123 896
max_number = max(number // 100, (number % 100 // 10), number % 10)
min_number = min(number // 100, (number % 100 // 10), number % 10)
sum_numbers = sum([number // 100, number % 100 // 10, number % 10])
sum_max_min = sum([max_number, min_number])
result = ("Число интересное" if max_number - min_number == sum_numbers - sum_max_min else "Число неинтересное")
print(result)

# TODO Абсолютная сумма
# Даны пять чисел a_1, \, a_2, \, a_3, \, a_4, \, a_5a
# Напишите программу, которая вычисляет сумму их модулей |a_1| + |a_2| +|a_3| +|a_4| + |a_5|∣a
#
# Формат входных данных
# На вход программе подается пять действительных чисел a_1, \, a_2, \, a_3, \, a_4, \, a_5a, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число – сумму модулей введённых чисел.

numbers = [float(input()) for _ in range(5)]  # 5.4, 33, -1232, -3.889, 6
abs_all_num = list(map(lambda num: abs(num), numbers))  # 5.4, 33, 1232, 3.889, 6
sum_numbers = sum(abs_all_num)
print(sum_numbers)

numbers = map(float, [input() for num in range(5)])  # !!!
sum_numbers = sum(map(abs, numbers))
print(sum_numbers)

# TODO Манхэттенское расстояние
# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути. Если только вы не умеете
# проходить сквозь стены, вам обязательно придется идти вдоль его параллельно-перпендикулярных улиц.
# На плоскости манхэттенское расстояние между двумя точками (p_{1}; \, p_{2})(p) определяется так
# |p_{1}-q_{1}|+|p_{2}-q_{2}|∣p
#
# Напишите программу определяющую манхэттенское расстояние между двумя точками, координаты которых заданы.
# Формат входных данных
# На вход программе подается четыре целых числа, каждое на отдельной строке – p_{1}, \, p_{2}, \, q_{1}, \, q_{2}p
# Формат выходных данных
# Программа должна вывести одно число – манхэттенское расстояние.

numbers = [int(input()) for number in range(4)]
manhattan_distance = sum([abs(numbers[0] - numbers[2]), abs(numbers[1] - numbers[3])])
print(manhattan_distance)

# TODO Напишите программу, которая выводит текст:
# "Python is a great language!", said Fred. "I don't ever remember having this much fun before."

text_1 = 'Python is a great language!", said Fred.'
text_2 = "I don't ever remember having this much fun before."
print(f'"{text_1} "{text_2}"')

# TODO Футбольная команда
# Напишите программу, которая считывает с клавиатуры название футбольной команды и выводит фразу:
# «Футбольная команда [введённая строка] имеет длину [длина введённой строки] символов».
#
# Формат входных данных
# На вход программе подаётся строка – название футбольной команды.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

soccer_team = input()
length_soccer_team = len(soccer_team)
print(f"Футбольная команда {soccer_team} имеет длину {length_soccer_team} символов")

# TODO Три города
# Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.
#
# Формат входных данных
# На вход программе подаётся названия трех городов, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.
# Примечание. Гарантируется, что длины названий всех трех городов различны.

words = sorted([input() for _ in range(3)], key=len)  # Москва Санкт-Петербург Екатеринбург
print(words[0])
print(words[2])

words = [input() for _ in range(3)]
max_word = max(words, key=len)
min_word = min(words, key=len)
print(max_word)
print(min_word)

# TODO Арифметические строки
# Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет можно ли из длин этих строк построить
# возрастающую арифметическую прогрессию.
#
# Формат входных данных
# На вход программе подаются три строки, каждая на отдельной строке.
# Формат выходных данных
# Программа должна вывести строку «YES», если из длин введенных слов можно построить арифметическую
# прогрессию, «NO» в ином случае.

# words = [input() for _ in range(3)]  # abc a abcde - YES, 2434 90099 21 - NO
# length_words = list(map(len, words))

length_words = sorted([len(input()) for _ in range(3)])
max_word = max(length_words)
min_word = min(length_words)
middle_word = sum(length_words) - sum([max_word, min_word])
result = ("YES" if max_word - middle_word == middle_word - min_word else "NO")
print(result)

words = [input() for _ in range(3)]  # (2b-c-a)(2c-b-a)(2a-b-c) = 0
length_words = list(map(len, words))
word_1, word_2, word_3 = length_words[0], length_words[1], length_words[2]
if (2 * word_2 - word_3 - word_1) * (2 * word_3 - word_2 - word_1) * (2 * word_1 - word_2 - word_3) == 0:
    print("YES")
else:
    print("NO")

lst = sorted([len(input()) for i in range(3)])
print('YES' if lst[2] - lst[1] == lst[1] - lst[0] else 'NO')


# -----------------------------------
def search(num_1, num_2):  # Вывести все элементы первого списка, которых нет во втором
    search_elem = [elem for elem in num_1 if elem not in num_2]
    return search_elem


numbers_1 = [1, 6, 8, 3, 12, 5, 69]
numbers_2 = [5, 6, 8, 18, 1, 123, 88]
result = search(numbers_1, numbers_2)
print(result)
# ----------------------------------


# TODO Цвет настроения синий
# Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введенной строке есть подстрока
# «синий» и «NO» в противном случае.
#
# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

words = input()
word = "синий"
result = ['YES' if word in words else 'NO']
print(''.join(result))

# TODO Отдыхаем ли?
# Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введённой строке есть подстрока
# «суббота» или «воскресенье», и «NO» в противном случае.
#
# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

words = input()
saturday, sunday = 'суббота', 'воскресенье'
answer = ['YES' if saturday in words or sunday in words else 'NO']
print(''.join(answer))

# TODO Корректный email
# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки. Напишите программу проверяющую
# корректность email адреса.
#
# Формат входных данных
# На вход программе подаётся одна строка – email адрес.
# Формат выходных данных
# Программа должна вывести строку «YES», если email адрес является корректным и «NO» в ином случае.
# Примечание. Наличие символов @ и . недостаточно для корректности email адреса, однако их отсутствие гарантировано
# влечёт за собой неверный email.

email = input()
answer = ['YES' if '@' in email and '.' in email else 'NO']
print(''.join(answer))

# --------------------------------
s = input()
if len(s) == 1 and s in 'aeiou':
    print('YES')
# --------------------------------


# TODO Евклидово расстояние
# На плоскости евклидово расстояние между двумя точками(x_1; y_1) и (x2; y2) определяется
# так \rho = \sqrt{(x_1 - x_2) ^ 2 + (y_1 - y_2) ^ 2}ρ =(x1−x2)2+(y1−y2)2
# Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.
#
# Формат входных данных
# На вход программе подается четыре вещественных числа, каждое на отдельной строке – x1, y1, x2, y2
# Формат выходных данных
# Программа должна вывести одно число – евклидово расстояние.

from math import sqrt, hypot

nums = [float(input()) for _ in range(4)]
euclidean_distance = sqrt((nums[0] - nums[2]) ** 2 + (nums[1] - nums[3]) ** 2)
euclidean_distance_2 = hypot(nums[0] - nums[2], nums[1] - nums[3])  # то же самое именно функция Евклидово расстояния
print(euclidean_distance)
print(euclidean_distance_2)

# TODO Площадь и длина  (S=pi*R**2) (C=2*pi*R)
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу RR.
#
# Формат входных данных
# На вход программе подается одно вещественное число RR​.
# Формат выходных данных
# Программа должна вывести два числа – площадь круга и длину окружности радиуса RR.


from math import pi

radius = float(input())
area_circle = pi * radius ** 2
length_circle_radius = 2 * pi * radius
print(area_circle)
print(length_circle_radius)

# TODO Средние значения
# В математике выделяют следующие средние значения:
# среднее арифметическое чисел aa и bb: a+b/2
# среднее геометрическое чисел aa и bb: sqrt(a*b)
# среднее гармоническое чисел aa и bb: 2*a*b/a+b
# среднее квадратичное чисел aa и bb:sqrt(a**2+b**2/2)
#
# Формат входных данных
# На вход программе подается два вещественных числа aa и bb​, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести 4 числа – среднее арифметическое, геометрическое, гармоническое и квадратичное.


from math import sqrt

nums = [float(input()) for _ in range(2)]
arithmetic_mean = (nums[0] + nums[1]) / 2
geometric_mean = sqrt(nums[0] * nums[1])
harmonic_mean = (2 * nums[0] * nums[1]) / (nums[0] + nums[1])
quadratic_mean = sqrt((nums[0] ** 2 + nums[1] ** 2) / 2)
print(arithmetic_mean)
print(geometric_mean)
print(harmonic_mean)
print(quadratic_mean)

# TODO Тригонометрическое выражение
# Напишите программу, вычисляющую значение тригонометрического выражения
# sin x + cos x + tan**2 * x
# по заданному числу градусов xx.
#
# Формат входных данных
# На вход программе подается одно вещественное число xx измеряемое в градусах​.
# Формат выходных данных
# Программа должна вывести одно число – значение тригонометрического выражения.
#
# Примечание 1. Тригонометрические функции принимают аргумент в радианах. Чтобы перевести градусы в радианы,
# воспользуйтесь формулой r=x⋅π/180
# Примечание 2. Модуль math содержит встроенную функцию radians(), которая переводит угол из градусов в угол в радианах.

from math import radians, sin, cos, tan

number = radians(float(input()))
trigonometric_expression = sum([sin(number), cos(number), tan(number) ** 2])
print(trigonometric_expression)

# TODO Пол и потолок
# Напишите программу, вычисляющую значение ⌈x⌉ +⌊x⌋ по заданному вещественному
# числу xx.
#
# Формат входных данных
# На вход программе подается одно вещественное число xx.
# Формат выходных данных
# Программа должна вывести одно число – значение указанного выражения.
# Примечание. ⌈x⌉ – потолок числа, ⌊x⌋ – пол числа.

from math import ceil, floor

number = float(input())
result = sum([ceil(number), floor(number)])
print(result)

# TODO Квадратное уравнение 🌶️🌶️
# Даны три вещественных числа aa, bb, cc. Напишите программу, которая находит вещественные корни квадратного уравнения
# ax2+bx+c=0.
#
# Формат входных данных
# На вход программе подается три вещественных числа a != 0, b, c каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести вещественные корни уравнения если они существуют или текст «Нет корней» в противном случае.
# Примечание. Если уравнение имеет два корня, то следует вывести их в порядке возрастания.

# Алгоритм:
# 1. Найти дискриминант D=b**2 - 4*a*c
# 2. Если дискриминант меньше нуля, вывести Нет корней;
# 3. Если дискриминант = 0, корень один: x1 = (-b / (2 * a))
# 4. В противном случае если > 0 корней два: x1 = ((-b + D**0.5) / 2a) и x2 = ((-b - D**0.5) / 2a).
# находим х1, х2. А выводим min(x1, x2), max(x1, x2) - дабы обойтись от еще одного ветвления!

nums = [float(input()) for _ in range(3)]
discriminant = (nums[1] ** 2) - (4 * nums[0] * nums[2])
x_1 = (-nums[1] + discriminant ** 0.5) / (2 * nums[0])
x_2 = (-nums[1] - discriminant ** 0.5) / (2 * nums[0])
if discriminant < 0:
    print("Нет корней")
elif discriminant == 0:
    print(x_1)
else:
    print(min(x_1, x_2))
    print(max(x_1, x_2))

# TODO Правильный многоугольник
# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны и все углы между смежными сторонами.
# Площадь правильного многоугольника с длиной стороны aa и количеством сторон nn вычисляется по формуле:
# S=n*a**2/4tg(π/n)
# Даны два числа: натуральное число nn и вещественное число aa. Напишите программу, которая находит площадь
# указанного правильного многоугольника.
#
# Формат входных данных
# На вход программе подается два числа nn и aa, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести вещественное число – площадь многоугольника.

from math import pi, tan

num_1, num_2 = int(input()), float(input())
area_polygon = (num_1 * (num_2 ** 2)) / (4 * tan(pi / num_1))
print(area_polygon)

# TODO Повторяй за мной 1
# Дано предложение и количество раз которое его надо повторить. Напишите программу, которая повторяет данное предложение
# нужное количество раз.
#
# Формат входных данных
# В первой строке записано текстовое предложение, во второй — количество повторений.
# Формат выходных данных
# Программа должна вывести указанное текстовое предложение нужное количество раз. Каждое повторение должно
# начинаться с новой строки.

words = input()
count = int(input())
for _ in range(count):
    print(words)

# TODO Последовательность символов
# Напишите программу, которая использует ровно три цикла for для печати следующей последовательности символов:
#
# AAA
# AAA
# AAA
# AAA
# AAA
# AAA
# BBBB
# BBBB
# BBBB
# BBBB
# BBBB
# E
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# G
# Формат входных данных
# Формат выходных данных
# Программа должна вывести указанную последовательность символов.

for _ in range(6):
    print("A" * 3)
for _ in range(5):
    print("B" * 4)
print("E")
for _ in range(9):
    print("T" * 5)
print("G")

# TODO Звездный прямоугольник
# На вход программе подается натуральное число nn.
# Напишите программу, которая печатает звездный прямоугольник размерами n \times 19n×19.
#
# Формат входных данных
# На вход программе подаётся натуральное число n \in [1; \, 20]n∈[1;20] — высота звездного прямоугольника.
# Формат выходных данных
# Программа должна вывести звездный прямоугольник размерами n \times 19n×19.
# Подсказка. Для печати звездной линии используйте умножение строки на число.

number = int(input())
star_rectangle = '*' * 19
for _ in range(number):
    print(star_rectangle)

number = int(input())
star_rectangle = [f"\n{'*' * 19}" for _ in range(number)]
print(''.join(star_rectangle))

# TODO Квадрат числа
# На вход программе подается натуральное число nn. Напишите программу, которая для каждого из чисел от 00 до nn
# (включительно) выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).
#
# Формат входных данных
# На вход программе подается натуральное число nn.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# text = input()
# for number in range(10):
#     print(f"{number} {text}")

number = int(input())
for num in range(number + 1):
    print(f"{'Квадрат числа'} {num} {'равен'} {num ** 2}")

# TODO Звездный треугольник
# На вход программе подается натуральное число n(n≥2) – катет прямоугольного равнобедренного треугольника.
# Напишите программу, которая выводит звездный треугольник в соответствии с примером.
#
# Формат входных данных
# На вход программе подается одно натуральное число n \, (n \ge 2)n(n≥2).
# Формат выходных данных
# *****
# ****
# ***
# **
# *
# Программа должна вывести треугольник в соответствии с условием задачи.

number = int(input())
for digit in range(number):
    print('*' * (number - digit))

# TODO Популяция
# На вход программе подается три натуральных числа m, \, p, \, nm,p,n:
# m:m: стартовое количество организмов;
# p:p: среднесуточное увеличение в %;
# n:n: количество дней для размножения.
# Напишите программу, которая предсказывает размер популяции организмов. Программа должна выводить размер популяции
# в каждый день, начиная с 11 и заканчивая nn-м днем.
#
# Формат входных данных
# На вход программе подается три натуральных числа.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# a * (b / 100 + 1) ** i
# где а - стартовое количество организмов
# b - среднесуточное увеличение в %
# i - переменная цикла
# еще раз убедился, что математика в программировании наше все. Решить эту задачу можно и не зная формулу, которую
# привели в комментариях. за пример можно взять вывод программы в условии 10 50 6
# во второй день количество организмов будет равно 10 + 10/5 = 15
# третий день  15 + 15/2 = 22, 5
# четвертый день  22,5 + 22, 5/2 = 33,75
# пятый день  33,75 + 33,75/2 = 50,625
# шестой день 50,625 + 50,625/2 = 75,9375
# взглянув на числа 10, 15, 22.5, 33.75, 50.625, 75.9375 можно заметить, что каждое последующее число отличается
# от предыдущего в 1,5 раз (10*1,5=15; 15*1,5=22,5  и тд.), это значит, что выражение для третьего дня можно
# записать в виде 10*1,5*1,5, для четвертого 10*1,5*1,5*1,5  и тд.
# осталось выяснить, что за коэффициент 1.5, и как его получить, чтобы решение было универсальным
# нужно уйти от значения в %, чтоб не считать в 'попугаях', разделим значение в % на 100 получим 0,5 и (ужас)
# прибавив 1 как раз получим значение нужного нам коэффициента.
# в итоге если записать все в буквенном выражении получим туже формулу s = k*(1+p/100)**n

# помучился пару часов, в итоге плюнул, взял формулу сложного процента.
# А как она получается мне подсказали опытные товарищи). Попробую поделиться.
# у нас есть 10 муравьёв, каждый день они увеличиваются на 50%
# 10  + 50% = 10 + 5 = 15
# Процент можно записывать в разных формах. Например  50% = 0.5. 75% = 0.75 и т.д. Знак процента значит
# (дословно) "разделить на 100".
# m' = m + 50% = m + 0,5m =1,5m = m * 1,5
# 10 + 50% = 15 = 10 * 1.5
# Отсюда растёт формула сложного процента
# Если так делать n-раз:
# ((10 + 50%) + 50%) + 50% =
# (((10 * 1.5) * 1.5 ) * 1.5)
# Т.е. 10 * 1.5**3  или 10 * (1 + 0,5)**3 или m * (1 + p/100)**n

starting_quantity, average_increase, days = int(input()), int(input()), int(input())  # s = k*(1+p/100)**n
for day in range(days):
    result = starting_quantity * (1 + average_increase / 100) ** day
    print(f"{day + 1} {result}")

# ------------------------------------------
for num in range(56, 171, 2):  # Более эффективно
    print(num)

# одно и то же

for num in range(56, 171):
    if num % 2 == 0:
        print(num)
# -----------------------------------------

# TODO Последовательность чисел 1
# Даны два целых числа mm и nn ( m \le nm≤n). Напишите программу, которая выводит все числа от mm до nn включительно.
#
# Формат входных данных
# На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.

nums = [int(input()) for _ in range(2)]
for num in range(nums[0], nums[1] + 1):
    print(num)

# TODO Последовательность чисел 2 🌶️
# Даны два целых числа mm и nn. Напишите программу, которая выводит все числа от mm до nn включительно в порядке
# возрастания, если m < nm<n, или в порядке убывания в противном случае.
#
# Формат входных данных
# На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.

nums = [int(input()) for _ in range(2)]
if nums[0] < nums[1]:
    for num in range(nums[0], nums[1] + 1):
        print(num)
elif nums[0] > nums[1]:
    for num in range(nums[0], nums[1] - 1, -1):
        print(num)
else:
    print(nums[0])

nums = [int(input()) for _ in range(2)]
num_3 = 1
if not nums[0] < nums[1]:
    num_3 = -1
for num in range(nums[0], nums[1] + 1):
    print(num)

# TODO Последовательность чисел 3 🌶️
# Даны два целых числа mm и nn (m > nm>n). Напишите программу, которая выводит все нечетные числа от mm до nn
# включительно в порядке убывания.
#
# Формат входных данных
# На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.
# Примечание. Попробуйте решить задачу двумя способами: с использованием условного оператора if и без него.


nums = [int(input()) for _ in range(2)]
for num in range(nums[0], nums[1] - 1, - 1):
    if num % 2 != 0:
        print(num)

# TODO Последовательность чисел 4
# Даны два натуральных числа mm и nn ( m \le nm≤n). Напишите программу, которая выводит все числа от mm до nn
# включительно удовлетворяющие хотя бы одному из условий:
# число кратно 17;
# число оканчивается на 9;
# число кратно 3 и 5 одновременно.
# Формат входных данных
# На вход программе подаются два натуральных числа mm и nn (m \le nm≤n), каждое на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.
# Примечание. Если чисел удовлетворяющих условию нет, выводить ничего не надо.

nums = [int(input()) for _ in range(2)]
for num in range(nums[0], nums[1] + 1):
    if num % 17 == 0 or num % 10 == 9 or num % 3 == 0 and num % 5 == 0:
        print(num)

# TODO Таблица умножения
# Дано натуральное число nn. Напишите программу, которая выводит таблицу умножения на nn.
#
# Формат входных данных
# На вход программе подается натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу умножения на введенное число.
# Примечание. В качестве знака умножения используйте английскую букву x.

number = int(input())
for digit in range(1, 11):
    multiplication = number * digit
    print(f"{number} x {digit} = {multiplication}")

# TODO Напишем программу, определяющую, что натуральное число является простым:

number = int(input())
flag = True
for num in range(2, number):
    if number % num == 0:
        flag = False

if number == 1:
    print("Это единица, она не простая и не составная")
elif flag == True:
    print("Число простое")
else:
    print("Число составное")


# TODO Максимум и минимум
# Поиск наибольшего или наименьшего значения в некоторой последовательности чисел, также частая задача в 
# программировании. Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее число.

largest = -1
for _ in range(10):
    number = int(input())
    if number > largest:
        largest = number
print(f'Наибольшее число равно {largest}')


largest = int(input())  # принимаем первое число за максимальное
for i in range(9):
    num = int(input())
    if num > largest:
        largest = num
print('Наибольшее число равно', largest) 


# Примечание 4. Сумму чисел от 1 до 100, можно вычислить и без цикла:
# \text{Сумма} = \frac{1+100}{2}\cdot 100 = 5050.
# Сумма= 1+100/2*100=5050.

# Действительно, числа от 11 до 100100, можно разбить на 5050 пар, сумма в которых равна 101101: 
# 1+ 100 = 101, \, 2 + 99 = 101, \, 3 + 98 = 101, \ldots 50 + 51 = 101.
# 1+100=101,2+99=101,3+98=101,…50+51=101.


# TODO Количество чисел
# На вход программе подаются два целых числа aa и bb (a \le b)(a≤b). Напишите программу, которая подсчитывает 
# количество чисел в диапазоне от aa до bb включительно, куб которых оканчивается на 44 или 99.

# Формат входных данных
# На вход программе подаются два целых числа aa и bb (a \le b)(a≤b).
# Формат выходных данных
# Программа должна вывести одно целое число в соответствии с условием программы.
# Примечание. Куб числа a – это его третья степень a**3

counter = 0
numbers = [int(input()) for _ in range(2)]
for num in range(numbers[0], numbers[1] + 1):
    if num**3 % 10 in [4, 9]:
        counter += 1
print(counter)


# TODO Сумма чисел
# На вход программе подается натуральное число nn, а затем nn целых чисел, каждое на отдельной строке. 
# Напишите программу, которая подсчитывает сумму введенных чисел. 

# Формат входных данных
# На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести сумму данных чисел.


largest = 0
number = int(input())
for _ in range(number):
    digit = int(input())
    largest += digit

print(largest)


number = int(input())
numbers = sum([int(input()) for _ in range(number)])
print(numbers)


# TODO Асимптотическое приближение
# На вход программе подается натуральное число nn. Напишите программу, которая вычисляет значение выражения
# (1+1/2+1/3+...+1/n) - 1n(n)
# Примечание. Для вычисления натурального логарифма воспользуйтесь функцией log(n), которая находится в модуле math.


import math

largest = 1
number = int(input())
for digit in range(2, number + 1):
    largest += 1 / digit

result = largest - math.log(number)
print(result)


# TODO Сумма чисел 2
# На вход программе подается натуральное число nn. Напишите программу, которая подсчитывает сумму
# тех чисел от 11 до nn (включительно) квадрат которых оканчивается на 2, \, 52,5 или 88.

# Формат входных данных
# На вход программе подается натуральное число nn.
# Формат выходных данных
# Программа должна вывести единственное число в соответствии с условием задачи.
# Примечание. Если таких чисел нет в указанном диапазоне, то следует вывести 00.

counter = 0
number = int(input())
for digit in range(1, number + 1):
    if digit**2 % 10 in [2, 5, 8]:
        counter += digit

print(counter)


# TODO Факториал !!!
# На вход программе подается натуральное число nn. Напишите программу, которая вычисляет n!n!.

# Входные данные
# На вход программе подается натуральное число n, \, (n \le 12)n,(n≤12).
# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.
# Примечание. Факториалом натурального числа nn, называется произведение всех натуральных чисел от 11 до nn, то есть
# n!=1\cdot2\cdot3\cdot…\cdot n
# n!=1⋅2⋅3⋅…⋅n

factorial = 1
number = int(input())
for num in range(2, number + 1):
    factorial *= num

print(factorial)


def factorial(num):
    result = 1
    for digit in range(2, num + 1):
        result *= digit
    return result

number = int(input())
answer = factorial(number)
print(answer)


# TODO Без нулей
# Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.

# Формат входных данных
# На вход программе подаются 10 целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести произведение отличных от нуля чисел.
# Примечание. Гарантируется, что хотя бы одно из 10 чисел является ненулевым.

result = 1
numbers = [int(input()) for _ in range(10)]
for digit in numbers:
    if digit != 0:
        result *= digit
print(result)


def not_zero(numbers):
    product_nums = 1
    for digit in numbers:
        if digit != 0:
            product_nums *= digit
    return product_nums


data = [int(input()) for _ in range(10)]
result = not_zero(data)
print(result)


# TODO Сумма делителей
# На вход программе подается натуральное число nn. Напишите программу, которая вычисляет сумму всех его делителей.

# Входные данные
# На вход программе подается натуральное число nn.
# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.
# Примечание. Функция подсчета суммы всех делителей числа является очень важной в теории чисел.

summa = 0
number = int(input())
for digit in range(1, number + 1):
    if number % digit == 0:
        summa += digit
print(summa)


def sum_divisors(number):
    summa = 0
    for digit in range(1, number + 1):
        if number % digit == 0:
            summa += digit
    return summa

print(sum_divisors(50))


# TODO Знакочередующаяся сумма
# На вход программе подается натуральное число nn. Напишите программу вычисления знакочередующей суммы
# 1-2+3-4+5-6 + \ldots + (-1)^{n+1}n.
# 1−2+3−4+5−6+…+(−1)
# n+1
#  n.

# Входные данные
# На вход программе подается натуральное число nn.
# Выходные данные
# Программа должна вывести единственное число в соответствии с условием задачи.

total = 0
number = int(input())
for digit in range(1, number + 1):
    if digit % 2 == 0:
        total -= digit
    else:
        total += digit

print(total)


def sum_numbers(num):
    total = 0
    for digit in range(1, number + 1):
        if digit % 2 == 0:
            total -= digit
        else:
            total += digit
    return total

number = int(input())


total = 0
number = int(input())
for digit in range(1, number + 1):
    total += (-1)**(digit + 1) * digit

print(total)

# TODO Наибольшие числа 🌶️🌶️
# На вход программе подается натуральное число nn, а затем nn различных натуральных чисел, каждое на отдельной
#  строке. Напишите программу, которая выводит наибольшее и второе наибольшее число последовательности.

# Формат входных данных
# На вход программе подаются натуральное число n \ge 2n≥2, а затем nn различных натуральных чисел, каждое на
# отдельной строке.
# Формат выходных данных
# Программа должна вывести два наибольших числа, каждое на отдельной строке.


largest = -1
number = int(input())
numbers = [int(input()) for _ in range(number)]
for digit in numbers:
    if digit > largest:
        largest = digit

print(largest)
numbers.remove(largest)
print(max(numbers))

max_1 = -1
max_2 = -1
number = int(input())
for _ in range(number):
    num = int(input())
    if num > max_1:
        max_2 = max_1
        max_1 = num
    elif num > max_2:
        max_2 = num
print(max_1)
print(max_2)



# TODO Only even numbers 🌶️
# Напишите программу, которая считывает последовательность из 10 целых чисел и определяет является ли каждое из них четным или нет.

# Формат входных данных
# На вход программе подаются 10 целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести строку «YES», если все числа четные и «NO» в ином случае.

flag = True
numbers = [int(input()) for _ in range(10)]
for num in numbers:
    if num % 2 != 0:
        flag = False

if flag is True:
    print("YES")
else:
    print("NO")


# TODO Последовательность Фибоначчи 🌶️
# Напишите программу, которая считывает натуральное число nn и выводит первые nn чисел последовательности Фибоначчи.

# Формат входных данных
# На вход программе подается одно число n\,  (n \le 100)n (n≤100) – количество членов последовательности.

# Формат выходных данных
# Программа должна вывести члены последовательности Фибоначчи, отделенные символом пробела.

# Примечание. Последовательность Фибоначчи – это последовательность натуральных чисел, где каждое последующее число является суммой двух предыдущих:
# 1,  \, 1, \,  2, \,  3, \,  5, \,  8, \,  13, \,  21, \,  34, \,  55, \,  89, \ldots
# 1, 1, 2, 3, 5, 8, 13,  21, 34, 55, 89,…


fibonacci_1 = 1  # 1 1 2 3 5
fibonacci_2 = 0
numbers = []
number = int(input())
for _ in range(number):
    fibonacci_3 = fibonacci_1
    fibonacci_1 = fibonacci_3 + fibonacci_2
    fibonacci_2 = fibonacci_3
    numbers.append(fibonacci_3)

print(*numbers)


number = int(input())  # 1 1 2 3 5
fib_1 = 1
fib_2 = 1
for _ in range(number):
    print(fib_1, end=' ')
    fib_1, fib_2 = fib_2, fib_1 + fib_2



# TODO До КОНЦА 1
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является слово «КОНЕЦ» (без кавычек). Напишите программу, которая выводит члены данной последовательности.

# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.

# Формат выходных данных
# Программа должна вывести члены данной последовательности.

word = input()
text = []
while word != "КОНЕЦ":
    text.append(word)
    word = input()
print('\n'.join(text))


# TODO До КОНЦА 2
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является слово «КОНЕЦ» или «конец» (большими или маленькими буквами, без кавычек). Напишите программу, которая выводит члены данной последовательности.

# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.

# Формат выходных данных
# Программа должна вывести члены данной последовательности.


word = input()
text = []
while word != 'КОНЕЦ' and word != 'конец':
    text.append(word)
    word = input()
print('\n'.join(text))


word = input()
text = []
while True:
    text.append(word)
    word = input()
    if word in ['КОНЕЦ', 'конец']:
        break
print('\n'.join(text))


word = input()
while word not in ['КОНЕЦ', 'конец']:
    print(word)
    word = input()


# TODO Количество членов
# На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом последовательности является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами, без кавычек). Напишите программу, которая выводит общее количество членов данной последовательности.

# Формат входных данных
# На вход программе подается последовательность слов, каждое слово на отдельной строке.

# Формат выходных данных
# Программа должна вывести общее количество членов данной последовательности.

word = input()
counter = 0
while word not in ['стоп', 'хватит', 'достаточно']:
    counter += 1
    word = input()
print(counter)

word = input()
text = []
while word not in ['стоп', 'хватит', 'достаточно']:
    text.append(word)
    word = input()
print(len(text))


# TODO Пока делимся
# На вход программе подается последовательность целых чисел делящихся на 77, каждое число на отдельной строке. Концом последовательности является любое число не делящееся на 77. Напишите программу, которая выводит члены данной последовательности.

# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.

# Формат выходных данных
# Программа должна вывести члены данной последовательности.

number = int(input())
numbers = []
while number % 7 == 0:
    numbers.append(number)
    number = int(input())

for num in numbers:
    print(num)


number = int(input())
numbers = []
while number % 7 == 0:
    numbers.append(number)
    number = int(input())

numbers = list(map(str, numbers))
print('\n'.join(numbers))


# TODO Сумма чисел
# На вход программе подается последовательность целых чисел, каждое число на отдельной строке. Концом последовательности является любое отрицательное число. Напишите программу, которая выводит сумму всех членов данной последовательности.

# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.

# Формат выходных данных
# Программа должна вывести сумму членов данной последовательности.

number = int(input())
total = 0
while number > -1:
    total += number
    number = int(input())
print(total)


number = int(input())
total = []
while number > -1:
    total.append(number)
    number = int(input())
print(sum(total))


# TODO Количество пятерок
# На вход программе подается последовательность целых чисел от 11 до 55, характеризующее оценку ученика, каждое
# число на отдельной строке. Концом последовательности является любое отрицательное число, либо число большее 55.
# Напишите программу, которая выводит количество пятерок.

# Формат входных данных
# На вход программе подается последовательность чисел, каждое число на отдельной строке.

# Формат выходных данных
# Программа должна вывести количество пятерок.


number = int(input())
counter = 0
# numbers = []
while -1 < number <= 5:
    number = int(input())
    if number == 5:
        counter += 1
print(counter)


number = int(input())
numbers = []
while -1 < number <= 5:
    numbers.append(number)
    number = int(input())
print(numbers.count(5))


# TODO Ведьмаку заплатите чеканной монетой
# Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к тому же ведьмак не принимает купюры, он принимает только чеканные монеты. В мире ведьмака существуют монеты с номиналами 1, \, 5, \, 10, \, 251,5,10,25.

# Напишите программу, которая определяет какое минимальное количество чеканных монет нужно заплатить ведьмаку.
# Формат входных данных
# На вход программе подается одно натуральное число, цена за услугу ведьмака.
# Формат выходных данных
# Программа должна вывести минимально возможное количество чеканных монет для оплаты.

number = int(input())
counter = 0
while number >= 25:
    counter += 1
    number -= 25
while number >= 10:
    counter += 1
    number -= 10
while number >= 5:
    counter += 1
    number -= 5
while number >= 1:
    counter += 1
    number -= 1
print(counter)


number = int(input())
counter = 0
for num in [25, 10, 5, 1]:
    while number // num > 0:
        counter += 1
        number -= num
print(counter)


# TODO Обратный порядок 1
# Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести цифры введенного числа в столбик в обратном порядке.

number = int(input())
while number > 0:
    last_number = number % 10
    print(last_number)
    number = number // 10


# TODO Обратный порядок 2
# Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести число, записанное в обратном порядке.

number = int(input())
while number > 0:
    print(number % 10, end='')
    number = number // 10


number = int(input())
revers_number = []
while number > 0:
    revers_number.append(str(number % 10))
    number = number // 10
print(''.join(revers_number))


number = input()
revers_number = reversed(number)
print(''.join(revers_number))


# TODO max и min
# Дано натуральное число n, \, (n \ge 10)n,(n≥10). Напишите программу, которая определяет его максимальную и минимальную цифры.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести максимальную и минимальную цифры введенного числа (с поясняющей надписью).


number = int(input())  # 7645897791
largest = 0
smallest = number
while number > 0:
    last_num = number % 10
    if last_num > largest:
        largest = last_num
    if last_num < smallest:
        smallest = last_num
    number = number // 10

print(f"Максимальная цифра равна {largest}")
print(f"Минимальная цифра равна {smallest}")


number = int(input())
numbers = []
while number > 0:
    numbers.append(number % 10)
    number = number // 10
print(f"Максимальная цифра равна {max(numbers)}")
print(f"Минимальная цифра равна {min(numbers)}")


# TODO Все вместе
# Дано натуральное число. Напишите программу, которая вычисляет:

# сумму его цифр;
# количество цифр в нем;
# произведение его цифр;
# среднее арифметическое его цифр;
# его первую цифру;
# сумму его первой и последней цифры.
# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке.

number = int(input())  # 5678
total = 0
counter = 0
product_nums = 1
all_digits = []
while number > 0:
    last_digit = number % 10
    total += last_digit
    counter += 1
    product_nums = product_nums * last_digit
    all_digits.append(last_digit)
    number = number // 10

avg = total / counter
first_digit = all_digits[-1]
sum_first_last_digit = sum([all_digits[0], all_digits[-1]])

print(f"{total}\n {counter}\n {product_nums}\n {avg}\n {first_digit}\n {sum_first_last_digit}")



number = int(input())  # 5678
all_digits = []
product_nums = 1
while number > 0:
    last_digit = number % 10
    product_nums = product_nums * last_digit
    all_digits.append(last_digit)
    number = number // 10

total = sum(all_digits)
counter = len(all_digits)
avg = total / counter
first_digit = all_digits[-1]
sum_first_last_digit = sum([all_digits[0], all_digits[-1]])

print(f"{total}\n {counter}\n {product_nums}\n {avg}\n {first_digit}\n {sum_first_last_digit}")


# TODO Вторая цифра
# Дано натуральное число n \, (n > 9)n(n>9). Напишите программу, которая определяет его вторую (с начала) цифру.

# Формат входных данных
# На вход программе подается одно натуральное число, состоящее как минимум из двух цифр.

# Формат выходных данных
# Программа должна вывести его вторую (с начала) цифру.

number = int(input())  # 455672
numbers = []
while number > 0:
    numbers.append(number % 10)
    number //= 10

print(numbers[-2])

number = input()  # 455672
print(number[1])


# TODO Одинаковые цифры
# Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из одинаковых цифр.

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести «YES» если число состоит из одинаковых цифр и «NO» в противном случае.

number = input()
if max(number) == min(number):
    print('YES')
else:
    print('NO')


number = int(input())  # 11112111
last_digit = number % 10
flag = True
while number > 0:
    next_digit = number % 10
    if next_digit != last_digit:
        flag = False
    number = number // 10

if flag:
    print('YES')
else:
    print('NO')


# TODO Упорядоченные цифры 🌶️
# Дано натуральное число. Напишите программу, которая определяет, является ли последовательность его цифр
# при просмотре справа налево упорядоченной по неубыванию.

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести «YES» если последовательность его цифр при просмотре справа налево является
# упорядоченной по неубыванию и «NO» в противном случае.

number = int(input())  # 54321
flag = True
while number > 9:
    last_digit = number % 10
    next_digit = (number % 100) // 10
    if last_digit > next_digit:
        flag = False
    number //= 10

if flag:
    print('YES')
else:
    print('NO')


number = int(input())  # 54321
last_digit = number % 10
flag = True
while number != 0:
    next_digit = number % 10
    if last_digit > next_digit:
        flag = False
    else:
        last_digit = next_digit
    number //= 10

if flag:
    print('YES')
else:
    print('NO')


# ---------------------------------------------------
total = 0
for _ in range(10):
    number = int(input())
    if number < 0:
        break
    total += number

print(total)


num = int(input())
number = num
flag = False
while number != 0:
    last_digit = number % 10
    if last_digit == 7:
        flag = True
        break
    number //= 10

if flag:
    print("There is 7")
else:
    print("Not is 7")

# Напишем программу, которая выводит все числа от 1 до 100, #кроме# чисел 7, 17, 29 и 78.
for digit in range(1, 101):
    if digit == 7 or digit == 17 or digit == 29 or digit == 78:
        continue  # пропустить и продолжить, за исключением
    print(digit)
# ----------------------------------------------------

# TODO Наименьший делитель
# На вход программе подается число n > 1n>1. Напишите программу, которая выводит его наименьший отличный от 11 делитель.

# Формат входных данных
# На вход программе подается одно натуральное число nn.
# Формат выходных данных
# Программа должна вывести наименьший делитель отличный от 11.
# Примечание. Используйте оператор break при обнаружении делителя.


number = int(input())
for digit in range(2, number + 1):
    if number % digit == 0:
        break
print(digit)


# TODO Следуй правилам
# На вход программе подается натуральное число nn. Напишите программу, которая выводит числа от 11 до
# nn включительно за исключением:

# чисел от 55 до 99 включительно;
# чисел от 1717 до 3737 включительно;
# чисел от 7878 до 8787 включительно.
# Формат входных данных
# На вход программе подается одно натуральное число nn.

# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.
# Примечание. Используйте оператор continue.

number = int(input())
for digit in range(1, number + 1):
    if 5 <= digit <= 9 or 17 <= digit <= 37 or 78 <= digit <= 87:
        continue
    print(digit)

number = int(input())
for digit in range(1, number + 1):
    if digit in range(5, 10) or digit in range(17, 38) or digit in range(78, 87):
        continue
    print(digit)

# --------------------------------------------------------------------
# TODO Напишем, программу, которая определяет, содержит ли введенное пользователем число, цифру 7. Вместо
#  программного кода, написанного ранее:
num = int(input())
n = num
while n != 0:
    last = n % 10
    if last == 7:
        print('Число', num, 'содержит цифру 7')
        break
    n //= 10
else:
    print('Число', num, 'не содержит цифру 7')

# -------------------------------------------------------------------------------

# TODO Рассмотрим задачу, которая проверяет число на простоту.
num = int(input())
flag = True

for i in range(2, int(num ** 0.5) + 1):
    if num % i == 0:
        flag = False
        break
if num > 1 and flag:
    print('Число простое')
else:
    print('Число составное')
# ---------------------------------------------------------------------------------

numbers = []
for number in range(1, 101):
    if number % 7 == 0:
        numbers.append(number)

print(*numbers)


for number in range(1, 101):
    if number % 7 == 0:
        print(number)

# TODO Требовалось написать программу которая находит сумму всех нечетных чисел от 1 до 1000.
total = 0
for number in range(1, 1001):
    if number % 2 != 0:
        total += number

print(total)


total = 0
for number in range(1, 1001, 2):
    total += number

print(total)


# TODO Требовалось написать программу которая вычисляет факториал числа.
number = int(input())
factorial = 1
for digit in range(1, number + 1):
    factorial *= digit

print(factorial)

import math

print(math.factorial(5))


# TODO Ревью кода-1 🌶️🌶️
# На обработку поступает последовательность из 1010 целых чисел. Известно, что вводимые числа по абсолютной величине
# не превышают 10^610
# 6
#  . Нужно написать программу, которая выводит на экран количество неотрицательных чисел последовательности и их
#  произведение. Если неотрицательных чисел нет, требуется вывести на экран «NO». Программист торопился и написал
#  программу неправильно.

# Найдите все ошибки в этой программе (их ровно 44). Известно, что каждая ошибка затрагивает только одну строку и
# может быть исправлена без изменения других строк.

# Примечание 1. Число xx не превышает по абсолютной величине 10^610
# 6
#  , если -10^6 \le x \le 10^6−10
# 6
#  ≤x ≤10
# 6
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.

counter = 0
multi = 1
flag = False
for _ in range(10):
    number = int(input())
    if number > -1:
        flag = True
        counter += 1
        multi *= number

if flag:  # правильнее вместо if flag == True: (сравнение с True должно быть если условие истинно)
    print(counter)
    print(multi)
else:
    print('NO')


# TODO Ревью кода-2 🌶️🌶️
# На обработку поступает последовательность из 1010 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10^610
# 6
#  . Нужно написать программу, которая выводит на экран сумму всех отрицательных чисел последовательности и максимальное отрицательное число в последовательности. Если отрицательных чисел нет, требуется вывести на экран «NO». Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их ровно 55). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# Примечание 1. Число xx не превышает по абсолютной величине 10^610
# 6
#  , если -10^6 \le x \le 10^6−10
# 6
#  ≤x ≤10
# 6

# Примечание 2. При необходимости вы можете добавить необходимые строки кода.


total = 0
numbers = []
flag = False
for _ in range(10):
    number = int(input())
    if number < 0:
        flag = True
        total += number
        numbers.append(number)

if flag:
    print(total)
    print(max(numbers))
else:
    print('NO')


total = 0
largest = -10**6
flag = False
for _ in range(10):
    number = int(input())
    if number < 0:
        flag = True
        total += number
    if 0 > number > largest:
        largest = number

if flag:
    print(total)
    print(largest)
else:
    print('NO')


# TODO Ревью кода-3
# На обработку поступает последовательность из 77 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10^610
# 6
#  . Нужно написать программу, которая подсчитывает и выводит сумму всех чётных чисел последовательности или 00, если чётных чисел в последовательности нет. Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их ровно 44). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# Примечание 1. Число xx не превышает по абсолютной величине 10^610
# 6
#  , если -10^6 \le x \le 10^6−10
#
#  ≤x ≤10**6
# Примечание 2. При необходимости вы можете добавить необходимые строки кода.

total = 0
for _ in range(7):
    number = int(input())
    if number % 2 == 0:
        total += number

if total > 0:
    print(total)
else:
    print(0)



# TODO Ревью кода-4 🌶️🌶️
# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран максимальную цифру числа, кратную 33. Если в числе нет цифр, кратных 33, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их ровно 55). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание 1. Число 00 делится на любое натуральное число.
# Примечание 2. При необходимости вы можете добавить нужные строки кода.

numbers = []
number = int(input())
while number != 0:
    last_digit = number % 10
    if last_digit % 3 == 0:
        numbers.append(last_digit)
    number //= 10

if numbers:
    print(max(numbers))
else:
    print('NO')


number = int(input())  # 12345678
largest = -1
while number > 0:
    last_digit = number % 10
    if last_digit % 3 == 0:
        if last_digit > largest:
            largest = last_digit
    number //= 10

if largest > -1:
    print(largest)
else:
    print('NO')


# TODO Ревью кода-5 🌶️
# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран его первую (старшую) цифру. Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их ровно 22). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.


number = int(input())  # 12345678
total = []
while number > 0:
    last_digit = number % 10
    total.append(last_digit)
    number //= 10

print(total[-1])


number = int(input()) # 12345678
while number > 9:
    number //= 10
print(number)


# TODO Ревью кода-6
# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран произведение цифр введенного числа. Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их ровно 33). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

multi = 1
number = int(input()) # 12345678
while number != 0:
    last_digit = number % 10
    multi *= last_digit
    number //= 10

print(multi)


# -------------------------------------------
for hours in range(24):
    for minutes in range(60):
        for seconds in range(60):
            print(f"{hours}: {minutes}: {seconds}")

for i in range(3):
    for j in range(3):
        print(i, j)

for i in range(3):
    for j in range(3):  # Каждый раз прерывается внутренний цикл когда переменные внешнего
        if i == j:  # и внутреннего цикла равны (продолжает идти внешний цикл)
            break
        print(i, j)

# Оператор break выполняет прерывание ближайшего цикла в котором он расположен. Аналогично, оператор continue осуществляет переход на следующую итерацию ближайшего цикла.

for i in range(3):
    for j in range(3):
        if i == j:
            continue
        print(i, j)
# 0 1
# 0 2
# 1 0
# 1 2
# 2 0
# 2 1


for j in range(8):
    for i in range(6):
        print ('*', end='')
    print()

for i in range(8):
    for j in range(i + 1):
        print('*', end='')
    print()


counter = 0
for i in range(99, 102):
    temp = i
    while temp > 0:
        counter += 1
        temp //= 10
print(counter)
# --------------------------------------------------



# TODO Таблица-1
# Дано натуральное число n \, (n \le 9)n (n≤ 9). Напишите программу, которая печатает таблицу размером n \times 3n×3 состоящую из данного числа (числа отделены одним пробелом).

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу размером n \times 3n×3 состоящую из данного числа.
# Примечание. В конце строки может быть пробел.

number = int(input())
for _ in range(number):
    for _ in range(3):
        print(number, end=' ')
    print()

# TODO Таблица-2
# Дано натуральное число n \, (n \le 9)n (n≤ 9). Напишите программу, которая печатает таблицу размером n \times 5n×5, где в ii-ой строке указано число ii (числа отделены одним пробелом).

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу размером n \times 5n×5 в соответствии с условием.
# Примечание. В конце строки может быть пробел.

number = int(input())
for row in range(1, number + 1):
    for _ in range(5):
        print(row, end=' ')
    print()

# TODO Таблица-3
# Дано натуральное число n \, (n \le 9)n (n≤ 9). Напишите программу, которая печатает таблицу сложения для всех чисел от 11 до nn в соответствии с примером.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу сложения для всех чисел от 11 до nn.
# Примечание. В конце строки может быть пробел.

number = int(input())
for num_1 in range(1, number + 1):
    for num_2 in range(1, 10):
        print(f"{num_1} + {num_2} = {sum([num_1, num_2])}")
    print()

# TODO Звездный треугольник 🌶️🌶️
# Дано нечетное натуральное число nn. Напишите программу, которая печатает равнобедренный звездный треугольник с основанием, равным nn в соответствии с примером:

# *
# **
# ***
# ****
# ***
# **
# *
# Формат входных данных
# На вход программе подается одно нечетное натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.
# Примечание. Используйте вложенный цикл for.


number = int(input())
for num in range(number//2 + 1):
    for _ in range(num + 1):
        print('*', end='')
    print()
for num in range(number//2, 0, -1):
    for _ in range(num):
        print('*', end='')
    print()


# TODO Численный треугольник 1
# Дано натуральное число
# n. Напишите программу, которая печатает численный треугольник в соответствии с примером:

# 1
# 22
# 333
# 4444
# 55555
# ...
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.
# Примечание. Используйте вложенный цикл for.

number = int(input())
for num_1 in range(1, number + 1):
    for num_2 in range(num_1):
        print(num_1, end=' ')
    print()

# ------------------------------------------------------------------
# TODO Задача 1. Найдите все пары натуральных чисел (и их количество) являющихся решением уравнения
# 12x+13y=777.

# Решение. Поскольку по условию числа x и y являются натуральными, то x≤64, y≤59. Напишем программу, которая перебирает всевозможные пары чисел (x;y) и проверяет для них выполнение условия 12x+13y=777.

total = 0
for num_1 in range(1, 65):
    for num_2 in range(1, 60):
        if 12*num_1 + 13*num_2 == 777:
            total += 1
            print(f"num_1 = {num_1}, num_2 = {num_2}")

print(f"Общее кол-во натуральных решений = {total}")


# TODO Задача 2. Найдите все пары натуральных чисел (и их количество) являющихся решением уравнения
# 2+y2+z2=2020.
# Решение.  Поскольку по условию числа x,y и z являются натуральными, то x,y,z≤2020=45. Напишем программу, которая перебирает всевозможные тройки чисел (x;y;z) и проверяет для них условие x2+y2+z2=2020.

total = 0
for x in range(1, 45):
    for y in range(1, 45):
        for z in range(1, 45):
            if x**2 + y**2 + z**2 == 2020:
                total += 1
                print(f"x = {x}, y = {y} z = {z}")

print(f"Общее кол-во натуральных решений = {total}")

# --------------------------------------------------------------------

# TODO 12 месяцев
# Решите уравнение в натуральных числах 28n+30k+31m=365.
# Примечание. Используйте вложенный цикл for. В первую очередь запишите решение с наименьшим значением n.

total = 0
for n in range(1, 32):
    for k in range(1, 32):
            for m in range(1, 32):
                if 28*n + 30*k + 31*m == 365:
                    print(f"n = {n}, k = {k}, m = {m}")


# TODO Старинная задача
# Имеется
# 100
# 100 рублей. Сколько быков, коров и телят можно купить на все эти деньги, если плата за быка – 10
# 10 рублей, за корову – 5
# 5 рублей, за теленка – 0.5
# 0.5 рубля и надо купить 100
# 100 голов скота?

# Примечание. Используйте вложенный цикл for.

for bull in range(100):
    for cow in range(100):
        for calves in range(100):
            if sum([bull*10, cow*5, calves*0.5]) == 100 and sum([bull, cow, calves]) == 100:
                print(bull, cow, calves)


for x in range(1, 10):
    for y in range(1, 18):
        for z in range(2, 99, 2):
            if (x*10 + y*5 + z/2 == 100) and (x + y + z == 100):
                print(x, y, z)


# TODO Гипотеза Эйлера о сумме степеней 🌶️🌶️
# В 1769 году Леонард Эйлер сформулировал обобщенную версию Великой теоремы Ферма, предполагая, что по крайней мере
# n энных степеней необходимо для получения суммы, которая сама является энной степенью для
# >2
# n>2. Напишите программу для опровержения гипотезы Эйлера (продержавшейся до 1967 года), и найдите четыре положительных целых числа, сумма 5-х степеней которых равна 5-й степени другого положительного целого числа.

# Таким образом, найдите пять натуральных чисел
# a,b,c,d,e удовлетворяющих условию: 5+b5+c5+d5=e5.
# В ответе укажите сумму a+b+c+d+e.

# Примечание 1. Используйте вложенный цикл for.
# Примечание 2. Считайте, что числа a,b,c,d,e не превосходят 150
# Примечание 3. Программа может работать дольше чем обычно. В зависимости от способа решения задачи на выполнение программы может уходить до нескольких минут. Попробуйте сократить количество вложенных циклов.

for a in range(1, 151):
    for b in range(a, 151):
        for c in range(b, 151):
            for d in range(c, 151):
                sum = a ** 5 + b ** 5 + c ** 5 + d ** 5
                e = int(sum ** (1/5))
                if sum == e ** 5:
                    print(a, b, c, d, e)
                    print(a + b + c + d + e)
                    break


# TODO Численный треугольник 3
# Дано натуральное число n.
# Напишите программу, которая печатает численный треугольник с высотой равной n, в соответствии с примером:

# 1
# 2 3
# 4 5 6
# 7 8 9 10
# 11 12 13 14 15
# 16 17 18 19 20 21
# ...

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.
# Примечание. Используйте вложенный цикл for.


counter = 1
number = int(input())
for row in range(1, number + 1):
    for _ in range(1, row + 1):
        print(counter, end=' ')
        counter += 1
    print()


# TODO Численный треугольник 4
# Дано натуральное число n.
# Напишите программу, которая печатает численный треугольник с высотой равной n, в соответствии с примером:

# 1
# 121
# 12321
# 1234321
# 123454321
# ...
# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести треугольник в соответствии с условием.
# Примечание. Используйте вложенный цикл for.

number = int(input())
for num_1 in range(1, number + 1):
    for num_2 in range(num_1):
        print(num_2 + 1, end='')
    for num_3 in range(num_1 - 1, 0, -1):
        print(num_3, end='')
    print()


# TODO Делители-1 🌶️
# На вход программе подается два натуральных числа a и b (<a< b). Напишите программу, которая находит натуральное число из отрезка [a;b] с максимальной суммой делителей.
# Формат входных данных
# На вход программе подаются два числа, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести два числа на одной строке, разделенных пробелом: число с максимальной суммой делителей и сумму его делителей.
# Примечание. Если таких чисел несколько, то выведите наибольшее из них.

sum_divider = 0
max_sum_divider = 0
digit = 1
number_1 = int(input())  # 2, 3, 4, 5, 6
number_2 = int(input())
for digit_1 in range(number_1, number_2 + 1):
    # sum_divider = 0
    for digit_2 in range(1, number_2 + 1):
        if digit_1 % digit_2 == 0:
            sum_divider += digit_2
    if sum_divider >= max_sum_divider:
        digit = digit_1
        max_sum_divider = sum_divider
    sum_divider = 0

print(digit, max_sum_divider)


# TODO Делители-2
# На вход программе подается натуральное число n.
# Напишите программу, выводящую графическое изображение делимости чисел от 1 до n включительно.
# В каждой строке надо напечатать очередное число и столько символов «+», сколько делителей у этого числа.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести графическое изображение чисел от 1 до n, каждое на отдельной строке.

divider = 0
number = int(input())
for digit_1 in range(1, number + 1):
    divider = 0
    for digit_2 in range(1, number + 1):
        if digit_1 % digit_2 == 0:
            divider += 1
    print(f"{digit_1}{'+'*divider}")  # print(digit_1, '+'*divider, sep='')


# TODO Цифровой корень
# На вход программе подается натуральное число n.
# Напишите программу, которая находит цифровой корень данного числа. Цифровой корень числа n получается следующим образом: если сложить все цифры этого числа, затем все цифры найденной суммы и повторить этот процесс, то в результате будет получено однозначное число (цифра), которое и называется цифровым корнем данного числа.

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести цифровой корень введенного числа.

# Примечание. Используйте вложенные циклы while.


number = int(input())  # 192
while number >= 10:
    summ = 0
    while number > 0:
        last_digit = number % 10
        summ += last_digit
        number //= 10
    number = summ

print(number)


number = int(input())  # 192 734573659783465783465978346593487
while number > 9:
    last_num = number % 10
    number = number // 10 + last_num
print(number)


# ----------------------------------------------------------------------
number = int(input())  # Перевернуть число
while number > 0:
    last_digit = number % 10
    print(last_digit, end='')
    number //= 10

numbers = [1, 2, 3, 4, 5]  # Перевернуть массив
while len(numbers) > 0:
    print(numbers[-1], end='')
    numbers.pop()


numbers = [1, 2, 3, 4, 5]  # Перевернуть массив при помощи встроенной функции
revers_nums = reversed(numbers)
print(*revers_nums, sep='')


number = int(input()) # Получитть сумму всех чисел
summ = 0
while number > 0:
    last_digit = number % 10
    summ += last_digit
    number //= 10

print(summ)



factorial = 1  # Факторифл числа 5! = 120
for digit in range(2, number + 1):
    factorial *= digit
print(factorial)


def fac(num):
    factorial = 1
    for digit in range(2, num + 1):
        factorial *= digit
    return factorial


number = int(input())
print(f"Факторриал числа {number} = {fac(number)}")


n = int(input())
res = 1
i = 2
while i <= n:
    res *= i
    i += 1
print(res)
# ------------------------------------------------------------------------

# TODO Сумма факториалов
# Дано натуральное число n.
# Напишите программу, которая выводит значение суммы 1!+2!+3!+…+n!.

# Формат входных данных
# На вход программе подается одно натуральное число.
# Формат выходных данных
# Программа должна вывести значение суммы 1!+2!+3!+…+n!.

# Примечание 1. Факториалом натурального числа n, называется произведение всех натуральных чисел от 1 до n, то есть
# n!=1⋅2⋅3⋅…⋅n
# Примечание 2. Задачу можно решить без вложенного цикла. Напишите две версии программы =)

number = int(input())
sum_factorial = 0
for digit_1 in range(1, number + 1):
    factorial = 1
    for digit_2 in range(2, digit_1 + 1):
        factorial *= digit_2
    sum_factorial += factorial

print(sum_factorial)



from math import factorial


number = int(input())
sum_factorial = 0
for digit in range(1, number + 1):
    sum_factorial += factorial(digit)

print(sum_factorial)


number = int(input())
factorial = 1
sum_factorial = 0
for digit in range(1, number + 1):
    factorial *= digit
    sum_factorial += factorial

print(sum_factorial)


number = int(input())
sum_factorial = 0
for digit_1 in range(1, number + 1):
    factorial = 1
    for digit_2 in range(2, digit_1 + 1):
        factorial *= digit_2
    sum_factorial += factorial

print(sum_factorial)



# TODO Простые числа
# На вход программе подается два натуральных числа a и b (a< b).
# Напишите программу, которая находит все простые числа от a до b включительно.

# Формат входных данных
# На вход программе подаются два числа, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести все простые числа от a до b включительно, каждое на отдельной строке.

# Примечание. Число 1 простым не является.

num_1, num_2 = int(input()), int(input())  # 2 (2, 3, 5, 7, 11, 13) 15
for digit_1 in range(num_1, num_2 + 1):
    count = 0
    for digit_2 in range(1, digit_1 + 1):
        if digit_1 % digit_2 == 0:
            count += 1
    if count == 2:
        print(digit_1)

# ---------------------------------*start exam*-----------------------------------------

# TODO Ревью кода - 7 🌶️
# На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран сумму чётных цифр этого числа или 0, если чётных цифр в записи нет. Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе, а не написать свою, возможно, использующую другой алгоритм решения.

n = int(input())
s = 0
while n > 0:
    if n % 2 == 0:
        s += n % 10
    n //= 10
print(s)


# TODO Ревью кода - 8 🌶️
# На обработку поступает последовательность из 8 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10**12
# Нужно написать программу, которая выводит на экран количество делящихся нацело на 4 чисел в исходной последовательности и максимальное делящееся нацело на 4 число. Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе, а не написать свою, возможно, использующую другой алгоритм решения.

n = 8
count = 0
maximum = -(10**12)
for i in range(1, n + 1):
    x = int(input())
    if x % 4 == 0:
        count += 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')


# TODO Ревью кода - 9
# На обработку поступает последовательность из 4 целых чисел. Известно, что вводимые числа по абсолютной величине не превышают 10**8.
# Нужно написать программу, которая выводит на экран количество нечётных чисел в исходной последовательности и максимальное нечётное число. Если нечётных чисел нет, требуется на экран вывести «NO». Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.
# Примечание. Обратите внимание, что требуется найти ошибки в имеющейся программе, а не написать свою, возможно, использующую другой алгоритм решения.

n = 4
count = 0
maximum = -(10**8)
for i in range(1, n + 1):
    x = int(input())
    if x % 2 != 0:
        count += 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')


# TODO Звездная рамка
# На вход программе подается натуральное число n.
# Напишите программу, которая печатает звездную рамку размерами n×19.

# Формат входных данных
# На вход программе подаётся натуральное число n∈[3;19] — высота звездной рамки.
# Формат выходных данных
# Программа должна вывести звездную рамку размерами n*19.
# Подсказка. Для печати звездной линии используйте умножение строки на число.

number = int(input())
print('*' * 19)
for row in range(number - 2):
    print('*' + ' '*17 + '*')
print('*' * 19)


# TODO Третья цифра
# Дано натуральное число n(n>99).
# Напишите программу, которая определяет его третью (с начала) цифру.

# Формат входных данных
# На вход программе подается одно натуральное число, состоящее как минимум из трех цифр.
# Формат выходных данных
# Программа должна вывести его третью (с начала) цифру.

number = int(input())  # 3459087654
while number > 1000:
    number //= 10

third_number = number % 10
print(third_number)


# TODO Все вместе 2
# Дано натуральное число. Напишите программу, которая вычисляет:

# количество цифр 3 в нем;
# сколько раз в нем встречается последняя цифра;
# количество четных цифр;
# сумму его цифр, больших пяти;
# произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
# сколько раз в нем встречается цифры 0 и 5 (всего суммарно).
# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке.

number = int(input())  # 56639
count_tree = 0
digit = number % 10
sum_last_digit = 0
even_number = 0
sum_more_five = 0
sum_multi_seven = 1
count_zero_five = 0
while number > 0:
    last_digit = number % 10
    if last_digit == 3:
        count_tree += 1
    if last_digit == digit:
        sum_last_digit += 1
    if last_digit % 2 == 0:
        even_number += 1
    if last_digit > 5:
        sum_more_five += last_digit
    if last_digit > 7:
        sum_multi_seven *= last_digit
    if last_digit in (0, 5):
        count_zero_five += 1
    number //= 10

print(count_tree, sum_last_digit, even_number, sum_more_five, sum_multi_seven, count_zero_five, sep='\n')

# print(f"{count_tree}\n{sum_last_digit}\n{even_number}\n{sum_more_five}\n{sum_multi_seven}\n{count_zero_five}")


# TODO Числа Рамануджана 🌶️
# Сриниваса Рамануджан – индийский математик, славившийся своей интуицией в области чисел. Когда английский математик Годфри Харди навестил его однажды в больнице, он обмолвился, что номером такси, на котором он приехал, было 1729
# 1729, такое скучное и заурядное число. На что Рамануджан ответил: "Нет, нет! Это очень интересное число. Это наименьшее число, выражаемое как сумма двух кубов двумя разными способами". Другими словами: 1729 = 1**3+12**3 = 9**3 +10**3.

# Напишите программу, которая находит аналогичные интересные числа. В ответе запишите первые 5 чисел в порядке возрастания, включая число 1729.
# Примечание. Используйте вложенный цикл.

for a in range(33):
    for b in range(33):
        for c in range(33):
            for d in range(33):
                if a**3 + b**3 == c**3 + d**3 and a != d and b != c and b != d and a > b and a > d and a > c:
                    print(a**3 + b**3)

# ---------------------------------*end exam*---------------------------------------------



















