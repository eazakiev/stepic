print(13 / 7)  # 1.5
print(13 // 7)  # 1
print(13 % 7)  # 6

# TODO Площадь треугольника (S = 1/2 * a*b)
# Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь.
#
# Формат входных данных
# На вход программе подаётся два числа с плавающей точкой – длины катетов, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число – площадь треугольника.

number_1, number_2 = float(input()), float(input())
area_triangle = (1 / 2) * (number_1 * number_2)  # 0.5
print(area_triangle)

# TODO Две старушки (1) V = V1+V2, 2) t = S/V)
# Две старушки идут навстречу друг другу с постоянными скоростями V_1V
# 1
# ​
#   и V_2V
# 2
# ​
#   км/ч. Определите, через какое время старушки встретятся, если расстояние между ними равно SS км.
#
# Формат входных данных
# На вход программе подаются три числа с плавающей точкой S, \, V_1, \, V_2S,V
# 1
# ​
#  ,V
# 2
# ​
#  , каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число в соответствии с условием задачи.
# Примечание. Это очень быстрые старушки.

distance, speed_1, speed_2 = float(input()), float(input()), float(input())
total_speed = sum([speed_1, speed_2])
result = distance / total_speed
print(result)

# TODO Обратное число (num ** -1 == 1/num)
# Напишите программу, которая считывает с клавиатуры одно число и выводит обратное ему. Если при этом введённое
# с клавиатуры число – ноль, то вывести «Обратного числа не существует» (без кавычек).
#
# Формат входных данных
# На вход программе подается одно действительное число.
# Формат выходных данных
# Программа должна вывести действительное число обратное данному, либо текст в соответствии с условием задачи.

number = float(input())
if number == 0:
    print("Обратного числа не существует")
elif (number ** -1) == (1 / number):
    print(number ** -1)

number = float(input())
if number == 0:
    print("Обратного числа не существует")
else:
    print(number ** -1)

# TODO 451 градус по Фаренгейту (C = 5/9 * (F-32))
# У известного американского писателя Рэя Бредбери есть роман «451 градус по Фаренгейту». Напишите программу, которая
# определяет, какой температуре по шкале Цельсия соответствует указанное значение по шкале Фаренгейта.
# Используйте формулу для перевода: C = \dfrac{5}{9}\left(F - 32\right)C=
# 9
# 5
# ​
#  (F− 32).
#
# Формат входных данных
# На вход программе подаётся вещественное число градусов по шкале Фаренгейта.
# Формат выходных данных
# Программа должна вывести число градусов по шкале Цельсия.

degrees_fahrenheit = float(input())
degrees_celsius = (5 / 9) * (degrees_fahrenheit - 32)
print(degrees_celsius)

# TODO Dog age
# На вход программе подается число nn – количество собачьих лет. Напишите программу, которая вычисляет возраст
# собаки в человеческих годах.
#
# Формат входных данных
# На вход программе подаётся натуральное число – количество собачьих лет.
# Формат выходных данных
# Программа должна вывести возраст собаки в человеческих годах.
# Примечание. В течение первых двух лет собачий год равен 10.5 человеческим годам. После этого каждый год
# собаки равен 4 человеческим годам.

dog_age = int(input())
if 1 <= dog_age <= 2:
    print(dog_age * 10.5)
elif dog_age > 2:
    result = (dog_age - 2) * 4 + 21
    print(result)
else:
    print("Ошибка ввода")

dog_age = int(input())
result = min(2, dog_age) * 10.5 + max(dog_age - 2, 0) * 4
print(result)

# TODO Первая цифра после точки
# Дано положительное действительное число. Выведите его первую цифру после десятичной точки.
#
# Формат входных данных
# На вход программе подается положительное действительное число.
# Формат выходных данных
# Программа должна вывести цифру в соответствии с условием задачи.

number = float(input())
result = (number * 10) % 10
print(int(result))

# TODO Дробная часть
# Дано положительное действительное число. Выведите его дробную часть.
#
# Формат входных данных
# На вход программе подается положительное действительное число.
# Формат выходных данных
# Программа должна вывести дробную часть числа в соответствии с условием задачи.

number = float(input())
result = number - int(number)
print(result)

print(int(44.45))  # 44
print(int(39483.2))  # 39483
print(44.45 - int(44.45))  # 0.45000000000000284
print(39483.2 - int(39483.2))  # 0.19999999999708962

number = int(input())  # 123
hundreds = number // 100  # (1 - сотни)
units = number // 10 % 10  # (2 - десятки)
dozens = number % 10  # (3 - единицы)
number_sum = sum([hundreds, units, dozens])
new_number = dozens * 100 + units * 10 + hundreds
print(f"{number_sum} {new_number}")

number = int(input())  # 123
number_sum = sum([(number // 100), (number // 10 % 10), (number % 10)])  # 1, 2, 3 (6)
new_number = str(number // 100), str(number % 10), str(number // 10 % 10)  # 1, 3, 2
print(f"{number_sum} {''.join(new_number)}")

# TODO ПЕРЕСТАНОВКА ЦИФР
# Задача Отправить
# Входные данные
# С клавиатуры вводится натуральное трехзначное число.
#
# Выходные данные
# Выведите через пробел в одну строку сумму цифр числа и новое число, образованное перестановкой единиц и десятков.
# Примеры
# №	Входные данные	Выходные данные
# 123	   6 132

number = int(input())  # 123
numbers = [number // 100, number % 100 // 10, number % 10]
print(sum(numbers), numbers[0] * 100 + numbers[2] * 10 + numbers[1])  # 6 132

# number = int(input())  # 123
# numbers = [number // 100, number % 100 // 10, number % 10]
# number_sum = sum(numbers)
# print(f"{number_sum} {numbers[0]}{numbers[2]}{numbers[1]}")


# TODO СУММА КВАДРАТОВ ЦИФР
# Напишите программу, которая по исходному пятизначному числу находит сумму квадратов цифр данного числа.
#
# Входные данные
# На вход программы подается натуральное пятизначное число.
# Выходные данные
# Выведите ответ на задачу.
# Примеры
# №	Входные данные	Выходные данные
# 12345	55

number = int(input())  # 12345
num_1 = number // 10000  # 1
num_2 = number // 1000 % 10  # 2
num_3 = number // 100 % 10  # 3
num_4 = number % 100 // 10  # (number // 10 % 10)  # 4
num_5 = number % 10  # 5
numbers = [num_1, num_2, num_3, num_4, num_5]
result = list(map(lambda elem: elem ** 2, numbers))
print(sum(result))

# TODO НОВОЕ ЧИСЛО
# Дано четырехзначное число. Написать программу, которая выводит на экран число, образованное при перестановке
# первой и второй, третьей и четвертой цифр заданного числа.
#
# Входные данные
# На вход программе подаётся одно число.
# Выходные данные
# Необходимо вывести новое число.
#
# Примеры
# №	Входные данные	Выходные данные
# 4561	5416

number = int(input())  # 4561
num_1 = number // 1000
num_2 = number // 100 % 10
num_3 = number % 100 // 10
num_4 = number % 10
print(num_2 * 1000 + num_1 * 100 + num_4 * 10 + num_3)

# TODO Задача 42696. Определи век
# Что такое век? Век - это период в 100 лет(столетие).Например, 1 - й век состоит из годов с 1 по 100, 2 - й век состоит
# из годов с 101 по 200 и так далее.
# Напишите программу, которая определяет в каком веке находится год N?
#
# Входные данные
# На вход подается натуральное число N(1 <= N <= 3000).
# Выходные данные
# Выведите на экран ответ на задачу в виде целого числа.
# Примеры
# №   Входные данные
# Выходные данные
# 2021  21
# 200   2
# Запрещенные операторы: if; while; for


number = int(input())  # 2021
if number % 100 > 0:
    result = number // 100 + 1
else:
    result = number // 100

print(int(result))

# TODO ЭЛЕКТРОННЫЕ ЧАСЫ
# Задача Отправить
# Дано число n. С начала суток прошло n минут. Определите, сколько часов и минут будут показывать электронные
# часы в этот момент. Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут
# (от 0 до 59). Учтите, что число n может быть больше, чем количество минут в сутках.
#
# Входные данные
# Вводится целое число n.
# Выходные данные
# Выведите ответ на задачу.
#  Запрещено использовать какие-либо алгоритмические конструкции, кроме арифметических операций
#  Примеры
# №	Входные данные	Выходные данные
# 150	2 30
# 1441	0 1
# Запрещенные операторы: if;for;while;do;max

number = int(input())  # 150 (2 30) 1441 (0 1)
hour = number // 60
minutes = number % 60
print(int(hour), int(minutes))

# TODO Наибольшее и наименьшее
# Напишите программу, которая находит наименьшее и наибольшее из пяти чисел.
#
# Формат входных данных
# На вход программе подается пять целых чисел, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести наименьшее и наибольшее число с поясняющей надписью.

numbers = [int(input()) for _ in range(5)]
min_number = min(numbers)
max_number = max(numbers)
print(f"Наименьшее число = {min_number}")
print(f"Наибольшее число = {max_number}")

numbers = []
for _ in range(5):
    number = int(input())
    numbers.append(number)
min_number = min(numbers)
max_number = max(numbers)
print(f"Наименьшее число = {min_number} \nНаибольшее число = {max_number}")

# TODO Сортировка трёх 🌶️
# Напишите программу, которая упорядочивает три числа от большего к меньшему.
#
# Формат входных данных
# На вход программе подается три целых числа, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести три числа, каждое на отдельной строке, упорядоченных от большего к меньшему.

numbers = sorted([int(input()) for _ in range(3)], reverse=True)
for number in numbers:
    print(number)

# TODO Интересное число
# Назовем число интересным, если в нем разность максимальной и минимальной цифры равняется средней по величине цифре.
# Напишите программу, которая определяет интересное число или нет. Если число интересное, следует
# вывести – «Число интересное» иначе «Число неинтересное».
#
# Формат входных данных
# На вход программе подается целое трехзначное число.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

number = int(input())  # 945 123 896
max_number = max(number // 100, (number % 100 // 10), number % 10)
min_number = min(number // 100, (number % 100 // 10), number % 10)
numbers = [number // 100, number % 100 // 10, number % 10]
result = ("Число интересное" if max_number - min_number in numbers else "Число неинтересное")
print(result)

number = int(input())  # 945 123 896
max_number = max(number // 100, (number % 100 // 10), number % 10)
min_number = min(number // 100, (number % 100 // 10), number % 10)
sum_numbers = sum([number // 100, number % 100 // 10, number % 10])
sum_max_min = sum([max_number, min_number])
result = ("Число интересное" if max_number - min_number == sum_numbers - sum_max_min else "Число неинтересное")
print(result)

# TODO Абсолютная сумма
# Даны пять чисел a_1, \, a_2, \, a_3, \, a_4, \, a_5a
# Напишите программу, которая вычисляет сумму их модулей |a_1| + |a_2| +|a_3| +|a_4| + |a_5|∣a
#
# Формат входных данных
# На вход программе подается пять действительных чисел a_1, \, a_2, \, a_3, \, a_4, \, a_5a, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести одно число – сумму модулей введённых чисел.

numbers = [float(input()) for _ in range(5)]  # 5.4, 33, -1232, -3.889, 6
abs_all_num = list(map(lambda num: abs(num), numbers))  # 5.4, 33, 1232, 3.889, 6
sum_numbers = sum(abs_all_num)
print(sum_numbers)

numbers = map(float, [input() for num in range(5)])  # !!!
sum_numbers = sum(map(abs, numbers))
print(sum_numbers)

# TODO Манхэттенское расстояние
# Прогуливаясь по Манхэттену, вы не можете попасть из точки А в точку Б по кратчайшему пути. Если только вы не умеете
# проходить сквозь стены, вам обязательно придется идти вдоль его параллельно-перпендикулярных улиц.
# На плоскости манхэттенское расстояние между двумя точками (p_{1}; \, p_{2})(p) определяется так
# |p_{1}-q_{1}|+|p_{2}-q_{2}|∣p
#
# Напишите программу определяющую манхэттенское расстояние между двумя точками, координаты которых заданы.
# Формат входных данных
# На вход программе подается четыре целых числа, каждое на отдельной строке – p_{1}, \, p_{2}, \, q_{1}, \, q_{2}p
# Формат выходных данных
# Программа должна вывести одно число – манхэттенское расстояние.

numbers = [int(input()) for number in range(4)]
manhattan_distance = sum([abs(numbers[0] - numbers[2]), abs(numbers[1] - numbers[3])])
print(manhattan_distance)

# TODO Напишите программу, которая выводит текст:
# "Python is a great language!", said Fred. "I don't ever remember having this much fun before."

text_1 = 'Python is a great language!", said Fred.'
text_2 = "I don't ever remember having this much fun before."
print(f'"{text_1} "{text_2}"')

# TODO Футбольная команда
# Напишите программу, которая считывает с клавиатуры название футбольной команды и выводит фразу:
# «Футбольная команда [введённая строка] имеет длину [длина введённой строки] символов».
#
# Формат входных данных
# На вход программе подаётся строка – название футбольной команды.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

soccer_team = input()
length_soccer_team = len(soccer_team)
print(f"Футбольная команда {soccer_team} имеет длину {length_soccer_team} символов")

# TODO Три города
# Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.
#
# Формат входных данных
# На вход программе подаётся названия трех городов, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.
# Примечание. Гарантируется, что длины названий всех трех городов различны.

words = sorted([input() for _ in range(3)], key=len)  # Москва Санкт-Петербург Екатеринбург
print(words[0])
print(words[2])

words = [input() for _ in range(3)]
max_word = max(words, key=len)
min_word = min(words, key=len)
print(max_word)
print(min_word)

# TODO Арифметические строки
# Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет можно ли из длин этих строк построить
# возрастающую арифметическую прогрессию.
#
# Формат входных данных
# На вход программе подаются три строки, каждая на отдельной строке.
# Формат выходных данных
# Программа должна вывести строку «YES», если из длин введенных слов можно построить арифметическую
# прогрессию, «NO» в ином случае.

# words = [input() for _ in range(3)]  # abc a abcde - YES, 2434 90099 21 - NO
# length_words = list(map(len, words))

length_words = sorted([len(input()) for _ in range(3)])
max_word = max(length_words)
min_word = min(length_words)
middle_word = sum(length_words) - sum([max_word, min_word])
result = ("YES" if max_word - middle_word == middle_word - min_word else "NO")
print(result)

words = [input() for _ in range(3)]  # (2b-c-a)(2c-b-a)(2a-b-c) = 0
length_words = list(map(len, words))
word_1, word_2, word_3 = length_words[0], length_words[1], length_words[2]
if (2 * word_2 - word_3 - word_1) * (2 * word_3 - word_2 - word_1) * (2 * word_1 - word_2 - word_3) == 0:
    print("YES")
else:
    print("NO")

lst = sorted([len(input()) for i in range(3)])
print('YES' if lst[2] - lst[1] == lst[1] - lst[0] else 'NO')


# -----------------------------------
def search(num_1, num_2):  # Вывести все элементы первого списка, которых нет во втором
    search_elem = [elem for elem in num_1 if elem not in num_2]
    return search_elem


numbers_1 = [1, 6, 8, 3, 12, 5, 69]
numbers_2 = [5, 6, 8, 18, 1, 123, 88]
result = search(numbers_1, numbers_2)
print(result)
# ----------------------------------


# TODO Цвет настроения синий
# Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введенной строке есть подстрока
# «синий» и «NO» в противном случае.
#
# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

words = input()
word = "синий"
result = ['YES' if word in words else 'NO']
print(''.join(result))

# TODO Отдыхаем ли?
# Напишите программу, которая считывает одну строку, после чего выводит «YES», если в введённой строке есть подстрока
# «суббота» или «воскресенье», и «NO» в противном случае.
#
# Формат входных данных
# На вход программе подается одна строка.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

words = input()
saturday, sunday = 'суббота', 'воскресенье'
answer = ['YES' if saturday in words or sunday in words else 'NO']
print(''.join(answer))

# TODO Корректный email
# Будем считать email адрес корректным, если в нем есть символ собачки (@) и точки. Напишите программу проверяющую
# корректность email адреса.
#
# Формат входных данных
# На вход программе подаётся одна строка – email адрес.
# Формат выходных данных
# Программа должна вывести строку «YES», если email адрес является корректным и «NO» в ином случае.
# Примечание. Наличие символов @ и . недостаточно для корректности email адреса, однако их отсутствие гарантировано
# влечёт за собой неверный email.

email = input()
answer = ['YES' if '@' in email and '.' in email else 'NO']
print(''.join(answer))

# --------------------------------
s = input()
if len(s) == 1 and s in 'aeiou':
    print('YES')
# --------------------------------


# TODO Евклидово расстояние
# На плоскости евклидово расстояние между двумя точками(x_1; y_1) и (x2; y2) определяется
# так \rho = \sqrt{(x_1 - x_2) ^ 2 + (y_1 - y_2) ^ 2}ρ =(x1−x2)2+(y1−y2)2
# Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.
#
# Формат входных данных
# На вход программе подается четыре вещественных числа, каждое на отдельной строке – x1, y1, x2, y2
# Формат выходных данных
# Программа должна вывести одно число – евклидово расстояние.

from math import sqrt, hypot

nums = [float(input()) for _ in range(4)]
euclidean_distance = sqrt((nums[0] - nums[2]) ** 2 + (nums[1] - nums[3]) ** 2)
euclidean_distance_2 = hypot(nums[0] - nums[2], nums[1] - nums[3])  # то же самое именно функция Евклидово расстояния
print(euclidean_distance)
print(euclidean_distance_2)

# TODO Площадь и длина  (S=pi*R**2) (C=2*pi*R)
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу RR.
#
# Формат входных данных
# На вход программе подается одно вещественное число RR​.
# Формат выходных данных
# Программа должна вывести два числа – площадь круга и длину окружности радиуса RR.


from math import pi

radius = float(input())
area_circle = pi * radius ** 2
length_circle_radius = 2 * pi * radius
print(area_circle)
print(length_circle_radius)

# TODO Средние значения
# В математике выделяют следующие средние значения:
# среднее арифметическое чисел aa и bb: a+b/2
# среднее геометрическое чисел aa и bb: sqrt(a*b)
# среднее гармоническое чисел aa и bb: 2*a*b/a+b
# среднее квадратичное чисел aa и bb:sqrt(a**2+b**2/2)
#
# Формат входных данных
# На вход программе подается два вещественных числа aa и bb​, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести 4 числа – среднее арифметическое, геометрическое, гармоническое и квадратичное.


from math import sqrt

nums = [float(input()) for _ in range(2)]
arithmetic_mean = (nums[0] + nums[1]) / 2
geometric_mean = sqrt(nums[0] * nums[1])
harmonic_mean = (2 * nums[0] * nums[1]) / (nums[0] + nums[1])
quadratic_mean = sqrt((nums[0] ** 2 + nums[1] ** 2) / 2)
print(arithmetic_mean)
print(geometric_mean)
print(harmonic_mean)
print(quadratic_mean)

# TODO Тригонометрическое выражение
# Напишите программу, вычисляющую значение тригонометрического выражения
# sin x + cos x + tan**2 * x
# по заданному числу градусов xx.
#
# Формат входных данных
# На вход программе подается одно вещественное число xx измеряемое в градусах​.
# Формат выходных данных
# Программа должна вывести одно число – значение тригонометрического выражения.
#
# Примечание 1. Тригонометрические функции принимают аргумент в радианах. Чтобы перевести градусы в радианы,
# воспользуйтесь формулой r=x⋅π/180
# Примечание 2. Модуль math содержит встроенную функцию radians(), которая переводит угол из градусов в угол в радианах.

from math import radians, sin, cos, tan

number = radians(float(input()))
trigonometric_expression = sum([sin(number), cos(number), tan(number) ** 2])
print(trigonometric_expression)

# TODO Пол и потолок
# Напишите программу, вычисляющую значение ⌈x⌉ +⌊x⌋ по заданному вещественному
# числу xx.
#
# Формат входных данных
# На вход программе подается одно вещественное число xx.
# Формат выходных данных
# Программа должна вывести одно число – значение указанного выражения.
# Примечание. ⌈x⌉ – потолок числа, ⌊x⌋ – пол числа.

from math import ceil, floor

number = float(input())
result = sum([ceil(number), floor(number)])
print(result)

# TODO Квадратное уравнение 🌶️🌶️
# Даны три вещественных числа aa, bb, cc. Напишите программу, которая находит вещественные корни квадратного уравнения
# ax2+bx+c=0.
#
# Формат входных данных
# На вход программе подается три вещественных числа a != 0, b, c каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести вещественные корни уравнения если они существуют или текст «Нет корней» в противном случае.
# Примечание. Если уравнение имеет два корня, то следует вывести их в порядке возрастания.

# Алгоритм:
# 1. Найти дискриминант D=b**2 - 4*a*c
# 2. Если дискриминант меньше нуля, вывести Нет корней;
# 3. Если дискриминант = 0, корень один: x1 = (-b / (2 * a))
# 4. В противном случае если > 0 корней два: x1 = ((-b + D**0.5) / 2a) и x2 = ((-b - D**0.5) / 2a).
# находим х1, х2. А выводим min(x1, x2), max(x1, x2) - дабы обойтись от еще одного ветвления!

nums = [float(input()) for _ in range(3)]
discriminant = (nums[1] ** 2) - (4 * nums[0] * nums[2])
x_1 = (-nums[1] + discriminant ** 0.5) / (2 * nums[0])
x_2 = (-nums[1] - discriminant ** 0.5) / (2 * nums[0])
if discriminant < 0:
    print("Нет корней")
elif discriminant == 0:
    print(x_1)
else:
    print(min(x_1, x_2))
    print(max(x_1, x_2))

# TODO Правильный многоугольник
# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны и все углы между смежными сторонами.
# Площадь правильного многоугольника с длиной стороны aa и количеством сторон nn вычисляется по формуле:
# S=n*a**2/4tg(π/n)
# Даны два числа: натуральное число nn и вещественное число aa. Напишите программу, которая находит площадь
# указанного правильного многоугольника.
#
# Формат входных данных
# На вход программе подается два числа nn и aa, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести вещественное число – площадь многоугольника.

from math import pi, tan

num_1, num_2 = int(input()), float(input())
area_polygon = (num_1 * (num_2 ** 2)) / (4 * tan(pi / num_1))
print(area_polygon)

# TODO Повторяй за мной 1
# Дано предложение и количество раз которое его надо повторить. Напишите программу, которая повторяет данное предложение
# нужное количество раз.
#
# Формат входных данных
# В первой строке записано текстовое предложение, во второй — количество повторений.
# Формат выходных данных
# Программа должна вывести указанное текстовое предложение нужное количество раз. Каждое повторение должно
# начинаться с новой строки.

words = input()
count = int(input())
for _ in range(count):
    print(words)

# TODO Последовательность символов
# Напишите программу, которая использует ровно три цикла for для печати следующей последовательности символов:
#
# AAA
# AAA
# AAA
# AAA
# AAA
# AAA
# BBBB
# BBBB
# BBBB
# BBBB
# BBBB
# E
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# TTTTT
# G
# Формат входных данных
# Формат выходных данных
# Программа должна вывести указанную последовательность символов.

for _ in range(6):
    print("A" * 3)
for _ in range(5):
    print("B" * 4)
print("E")
for _ in range(9):
    print("T" * 5)
print("G")

# TODO Звездный прямоугольник
# На вход программе подается натуральное число nn.
# Напишите программу, которая печатает звездный прямоугольник размерами n \times 19n×19.
#
# Формат входных данных
# На вход программе подаётся натуральное число n \in [1; \, 20]n∈[1;20] — высота звездного прямоугольника.
# Формат выходных данных
# Программа должна вывести звездный прямоугольник размерами n \times 19n×19.
# Подсказка. Для печати звездной линии используйте умножение строки на число.

number = int(input())
star_rectangle = '*' * 19
for _ in range(number):
    print(star_rectangle)

number = int(input())
star_rectangle = [f"\n{'*' * 19}" for _ in range(number)]
print(''.join(star_rectangle))

# TODO Квадрат числа
# На вход программе подается натуральное число nn. Напишите программу, которая для каждого из чисел от 00 до nn
# (включительно) выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).
#
# Формат входных данных
# На вход программе подается натуральное число nn.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# text = input()
# for number in range(10):
#     print(f"{number} {text}")

number = int(input())
for num in range(number + 1):
    print(f"{'Квадрат числа'} {num} {'равен'} {num ** 2}")

# TODO Звездный треугольник
# На вход программе подается натуральное число n(n≥2) – катет прямоугольного равнобедренного треугольника.
# Напишите программу, которая выводит звездный треугольник в соответствии с примером.
#
# Формат входных данных
# На вход программе подается одно натуральное число n \, (n \ge 2)n(n≥2).
# Формат выходных данных
# *****
# ****
# ***
# **
# *
# Программа должна вывести треугольник в соответствии с условием задачи.

number = int(input())
for digit in range(number):
    print('*' * (number - digit))

# TODO Популяция
# На вход программе подается три натуральных числа m, \, p, \, nm,p,n:
# m:m: стартовое количество организмов;
# p:p: среднесуточное увеличение в %;
# n:n: количество дней для размножения.
# Напишите программу, которая предсказывает размер популяции организмов. Программа должна выводить размер популяции
# в каждый день, начиная с 11 и заканчивая nn-м днем.
#
# Формат входных данных
# На вход программе подается три натуральных числа.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# a * (b / 100 + 1) ** i
# где а - стартовое количество организмов
# b - среднесуточное увеличение в %
# i - переменная цикла
# еще раз убедился, что математика в программировании наше все. Решить эту задачу можно и не зная формулу, которую
# привели в комментариях. за пример можно взять вывод программы в условии 10 50 6
# во второй день количество организмов будет равно 10 + 10/5 = 15
# третий день  15 + 15/2 = 22, 5
# четвертый день  22,5 + 22, 5/2 = 33,75
# пятый день  33,75 + 33,75/2 = 50,625
# шестой день 50,625 + 50,625/2 = 75,9375
# взглянув на числа 10, 15, 22.5, 33.75, 50.625, 75.9375 можно заметить, что каждое последующее число отличается
# от предыдущего в 1,5 раз (10*1,5=15; 15*1,5=22,5  и тд.), это значит, что выражение для третьего дня можно
# записать в виде 10*1,5*1,5, для четвертого 10*1,5*1,5*1,5  и тд.
# осталось выяснить, что за коэффициент 1.5, и как его получить, чтобы решение было универсальным
# нужно уйти от значения в %, чтоб не считать в 'попугаях', разделим значение в % на 100 получим 0,5 и (ужас)
# прибавив 1 как раз получим значение нужного нам коэффициента.
# в итоге если записать все в буквенном выражении получим туже формулу s = k*(1+p/100)**n

# помучился пару часов, в итоге плюнул, взял формулу сложного процента.
# А как она получается мне подсказали опытные товарищи). Попробую поделиться.
# у нас есть 10 муравьёв, каждый день они увеличиваются на 50%
# 10  + 50% = 10 + 5 = 15
# Процент можно записывать в разных формах. Например  50% = 0.5. 75% = 0.75 и т.д. Знак процента значит
# (дословно) "разделить на 100".
# m' = m + 50% = m + 0,5m =1,5m = m * 1,5
# 10 + 50% = 15 = 10 * 1.5
# Отсюда растёт формула сложного процента
# Если так делать n-раз:
# ((10 + 50%) + 50%) + 50% =
# (((10 * 1.5) * 1.5 ) * 1.5)
# Т.е. 10 * 1.5**3  или 10 * (1 + 0,5)**3 или m * (1 + p/100)**n

starting_quantity, average_increase, days = int(input()), int(input()), int(input())  # s = k*(1+p/100)**n
for day in range(days):
    result = starting_quantity * (1 + average_increase / 100) ** day
    print(f"{day + 1} {result}")

# ------------------------------------------
for num in range(56, 171, 2):  # Более эффективно
    print(num)

# одно и то же

for num in range(56, 171):
    if num % 2 == 0:
        print(num)
# -----------------------------------------

# TODO Последовательность чисел 1
# Даны два целых числа mm и nn ( m \le nm≤n). Напишите программу, которая выводит все числа от mm до nn включительно.
#
# Формат входных данных
# На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.

nums = [int(input()) for _ in range(2)]
for num in range(nums[0], nums[1] + 1):
    print(num)

# TODO Последовательность чисел 2 🌶️
# Даны два целых числа mm и nn. Напишите программу, которая выводит все числа от mm до nn включительно в порядке
# возрастания, если m < nm<n, или в порядке убывания в противном случае.
#
# Формат входных данных
# На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.

nums = [int(input()) for _ in range(2)]
if nums[0] < nums[1]:
    for num in range(nums[0], nums[1] + 1):
        print(num)
elif nums[0] > nums[1]:
    for num in range(nums[0], nums[1] - 1, -1):
        print(num)
else:
    print(nums[0])

nums = [int(input()) for _ in range(2)]
num_3 = 1
if not nums[0] < nums[1]:
    num_3 = -1
for num in range(nums[0], nums[1] + 1):
    print(num)

# TODO Последовательность чисел 3 🌶️
# Даны два целых числа mm и nn (m > nm>n). Напишите программу, которая выводит все нечетные числа от mm до nn
# включительно в порядке убывания.
#
# Формат входных данных
# На вход программе подаются два целых числа mm и nn, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.
# Примечание. Попробуйте решить задачу двумя способами: с использованием условного оператора if и без него.


nums = [int(input()) for _ in range(2)]
for num in range(nums[0], nums[1] - 1, - 1):
    if num % 2 != 0:
        print(num)

# TODO Последовательность чисел 4
# Даны два натуральных числа mm и nn ( m \le nm≤n). Напишите программу, которая выводит все числа от mm до nn
# включительно удовлетворяющие хотя бы одному из условий:
# число кратно 17;
# число оканчивается на 9;
# число кратно 3 и 5 одновременно.
# Формат входных данных
# На вход программе подаются два натуральных числа mm и nn (m \le nm≤n), каждое на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести числа в соответствии с условием задачи.
# Примечание. Если чисел удовлетворяющих условию нет, выводить ничего не надо.

nums = [int(input()) for _ in range(2)]
for num in range(nums[0], nums[1] + 1):
    if num % 17 == 0 or num % 10 == 9 or num % 3 == 0 and num % 5 == 0:
        print(num)

# TODO Таблица умножения
# Дано натуральное число nn. Напишите программу, которая выводит таблицу умножения на nn.
#
# Формат входных данных
# На вход программе подается натуральное число.
# Формат выходных данных
# Программа должна вывести таблицу умножения на введенное число.
# Примечание. В качестве знака умножения используйте английскую букву x.

number = int(input())
for digit in range(1, 11):
    multiplication = number * digit
    print(f"{number} x {digit} = {multiplication}")

# TODO Напишем программу, определяющую, что натуральное число является простым:

number = int(input())
flag = True
for num in range(2, number):
    if number % num == 0:
        flag = False

if number == 1:
    print("Это единица, она не простая и не составная")
elif flag == True:
    print("Число простое")
else:
    print("Число составное")


# TODO Максимум и минимум
# Поиск наибольшего или наименьшего значения в некоторой последовательности чисел, также частая задача в 
# программировании. Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее число.

largest = -1
for _ in range(10):
    number = int(input())
    if number > largest:
        largest = number
print(largest)










